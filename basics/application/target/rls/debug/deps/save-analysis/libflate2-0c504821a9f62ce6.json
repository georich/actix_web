{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"flate2","disambiguator":[11972092752786452471,4898562529988036714]},"crate_root":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src","external_crates":[{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[1877579056841321839,4002650866653523028]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[12966739244720591078,10895073499070158948]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4148811982382486632,5293825926111630395]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[55294194006836696,257979567559498938]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[5663549295587754337,15298730489275369687]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[198562575503244264,15640276364166720962]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15019360886040341153,15954958735131723916]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[2748248400471175825,13783408877556183619]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[13472166887002568360,10424338574949869411]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","num":10,"id":{"name":"libc","disambiguator":[6776164903394557340,5187685817441892726]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/ffi.rs","num":11,"id":{"name":"miniz_sys","disambiguator":[1355112051302865132,14275091562192207550]}}],"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":6803,"line_start":1,"line_end":204,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1314},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3310,"byte_end":3319,"line_start":90,"line_end":90,"column_start":13,"column_end":22},"alias_span":null,"name":"GzBuilder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1298},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3333,"byte_end":3341,"line_start":91,"line_end":91,"column_start":13,"column_end":21},"alias_span":null,"name":"GzHeader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1326},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3357,"byte_end":3365,"line_start":92,"line_end":92,"column_start":15,"column_end":23},"alias_span":null,"name":"Compress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1402},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3367,"byte_end":3380,"line_start":92,"line_end":92,"column_start":25,"column_end":38},"alias_span":null,"name":"CompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1396},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3382,"byte_end":3397,"line_start":92,"line_end":92,"column_start":40,"column_end":55},"alias_span":null,"name":"DecompressError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1332},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3399,"byte_end":3409,"line_start":92,"line_end":92,"column_start":57,"column_end":67},"alias_span":null,"name":"Decompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1408},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3411,"byte_end":3417,"line_start":92,"line_end":92,"column_start":69,"column_end":75},"alias_span":null,"name":"Status","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1356},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3434,"byte_end":3447,"line_start":93,"line_end":93,"column_start":15,"column_end":28},"alias_span":null,"name":"FlushCompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1376},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3449,"byte_end":3464,"line_start":93,"line_end":93,"column_start":30,"column_end":45},"alias_span":null,"name":"FlushDecompress","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1208},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3481,"byte_end":3484,"line_start":94,"line_end":94,"column_start":15,"column_end":18},"alias_span":null,"name":"Crc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1214},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3486,"byte_end":3495,"line_start":94,"line_end":94,"column_start":20,"column_end":29},"alias_span":null,"name":"CrcReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1232},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3790,"byte_end":3804,"line_start":110,"line_end":110,"column_start":28,"column_end":42},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":1144}},{"kind":"Use","ref_id":{"krate":0,"index":1238},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3833,"byte_end":3847,"line_start":111,"line_end":111,"column_start":28,"column_end":42},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":1144}},{"kind":"Use","ref_id":{"krate":0,"index":1440},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3873,"byte_end":3884,"line_start":112,"line_end":112,"column_start":25,"column_end":36},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":1144}},{"kind":"Use","ref_id":{"krate":0,"index":1446},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3910,"byte_end":3921,"line_start":113,"line_end":113,"column_start":25,"column_end":36},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":1144}},{"kind":"Use","ref_id":{"krate":0,"index":1274},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3945,"byte_end":3954,"line_start":114,"line_end":114,"column_start":23,"column_end":32},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":1144}},{"kind":"Use","ref_id":{"krate":0,"index":1280},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3978,"byte_end":3987,"line_start":115,"line_end":115,"column_start":23,"column_end":32},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":1144}},{"kind":"Use","ref_id":{"krate":0,"index":1286},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4011,"byte_end":4025,"line_start":116,"line_end":116,"column_start":23,"column_end":37},"alias_span":null,"name":"MultiGzDecoder","value":"","parent":{"krate":0,"index":1144}},{"kind":"Use","ref_id":{"krate":0,"index":1244},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4243,"byte_end":4257,"line_start":124,"line_end":124,"column_start":29,"column_end":43},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":1160}},{"kind":"Use","ref_id":{"krate":0,"index":1250},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4287,"byte_end":4301,"line_start":125,"line_end":125,"column_start":29,"column_end":43},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":1160}},{"kind":"Use","ref_id":{"krate":0,"index":1452},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4328,"byte_end":4339,"line_start":126,"line_end":126,"column_start":26,"column_end":37},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":1160}},{"kind":"Use","ref_id":{"krate":0,"index":1458},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4366,"byte_end":4377,"line_start":127,"line_end":127,"column_start":26,"column_end":37},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":1160}},{"kind":"Use","ref_id":{"krate":0,"index":1292},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4402,"byte_end":4411,"line_start":128,"line_end":128,"column_start":24,"column_end":33},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":1160}},{"kind":"Use","ref_id":{"krate":0,"index":1220},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4639,"byte_end":4653,"line_start":136,"line_end":136,"column_start":31,"column_end":45},"alias_span":null,"name":"DeflateEncoder","value":"","parent":{"krate":0,"index":1172}},{"kind":"Use","ref_id":{"krate":0,"index":1226},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4685,"byte_end":4699,"line_start":137,"line_end":137,"column_start":31,"column_end":45},"alias_span":null,"name":"DeflateDecoder","value":"","parent":{"krate":0,"index":1172}},{"kind":"Use","ref_id":{"krate":0,"index":1428},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4728,"byte_end":4739,"line_start":138,"line_end":138,"column_start":28,"column_end":39},"alias_span":null,"name":"ZlibEncoder","value":"","parent":{"krate":0,"index":1172}},{"kind":"Use","ref_id":{"krate":0,"index":1434},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4768,"byte_end":4779,"line_start":139,"line_end":139,"column_start":28,"column_end":39},"alias_span":null,"name":"ZlibDecoder","value":"","parent":{"krate":0,"index":1172}},{"kind":"Use","ref_id":{"krate":0,"index":1256},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4806,"byte_end":4815,"line_start":140,"line_end":140,"column_start":26,"column_end":35},"alias_span":null,"name":"GzEncoder","value":"","parent":{"krate":0,"index":1172}},{"kind":"Use","ref_id":{"krate":0,"index":1262},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4842,"byte_end":4851,"line_start":141,"line_end":141,"column_start":26,"column_end":35},"alias_span":null,"name":"GzDecoder","value":"","parent":{"krate":0,"index":1172}},{"kind":"Use","ref_id":{"krate":0,"index":1268},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4878,"byte_end":4892,"line_start":142,"line_end":142,"column_start":26,"column_end":40},"alias_span":null,"name":"MultiGzDecoder","value":"","parent":{"krate":0,"index":1172}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":6803,"line_start":1,"line_end":204,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":12},{"krate":0,"index":24},{"krate":0,"index":30},{"krate":0,"index":36},{"krate":0,"index":78},{"krate":0,"index":128},{"krate":0,"index":348},{"krate":0,"index":404},{"krate":0,"index":718},{"krate":0,"index":830},{"krate":0,"index":926},{"krate":0,"index":1144},{"krate":0,"index":1160},{"krate":0,"index":1172},{"krate":0,"index":1188},{"krate":0,"index":1464},{"krate":0,"index":1484},{"krate":0,"index":1480},{"krate":0,"index":1474},{"krate":0,"index":1470},{"krate":0,"index":1466},{"krate":0,"index":1192},{"krate":0,"index":1204}],"decl_id":null,"docs":" A DEFLATE-based stream compression/decompression library","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2966,"byte_end":2988,"line_start":74,"line_end":74,"column_start":1,"column_end":23}},{"value":"deny(missing_debug_implementations)","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2989,"byte_end":3028,"line_start":75,"line_end":75,"column_start":1,"column_end":40}},{"value":"allow(trivial_numeric_casts)","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3029,"byte_end":3061,"line_start":76,"line_end":76,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1208},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":9780,"byte_end":9783,"line_start":13,"line_end":13,"column_start":12,"column_end":15},"name":"Crc","qualname":"::crc::Crc","value":"Crc {  }","parent":null,"children":[{"krate":0,"index":275},{"krate":0,"index":277}],"decl_id":null,"docs":" The CRC calculated by a [`CrcReader`].","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1214},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":9979,"byte_end":9988,"line_start":22,"line_end":22,"column_start":12,"column_end":21},"name":"CrcReader","qualname":"::crc::CrcReader","value":"CrcReader {  }","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":283}],"decl_id":null,"docs":" A wrapper around a [`Read`] that calculates the CRC.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":10073,"byte_end":10076,"line_start":29,"line_end":29,"column_start":12,"column_end":15},"name":"new","qualname":"<Crc>::new","value":"fn () -> Crc","parent":null,"children":[],"decl_id":null,"docs":" Create a new CRC.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":10149,"byte_end":10152,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"sum","qualname":"<Crc>::sum","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" bla\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":10361,"byte_end":10367,"line_start":40,"line_end":40,"column_start":12,"column_end":18},"name":"amount","qualname":"<Crc>::amount","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The number of bytes that have been used to calculate the CRC.\n This value is only accurate if the amount is lower than 2<sup>32</sup>.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":10468,"byte_end":10474,"line_start":45,"line_end":45,"column_start":12,"column_end":18},"name":"update","qualname":"<Crc>::update","value":"fn (&mut self, data: &[u8]) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Update the CRC with the bytes in `data`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":10721,"byte_end":10726,"line_start":53,"line_end":53,"column_start":12,"column_end":17},"name":"reset","qualname":"<Crc>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the CRC.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":10874,"byte_end":10881,"line_start":59,"line_end":59,"column_start":12,"column_end":19},"name":"combine","qualname":"<Crc>::combine","value":"fn (&mut self, additional_crc: &Crc) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Combine the CRC with the CRC for the subsequent block of bytes.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11284,"byte_end":11287,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"new","qualname":"<CrcReader<R>>::new","value":"fn (r: R) -> CrcReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11476,"byte_end":11479,"line_start":81,"line_end":81,"column_start":12,"column_end":15},"name":"crc","qualname":"<CrcReader<R>>::crc","value":"fn (&self) -> &Crc","parent":null,"children":[],"decl_id":null,"docs":" Get the Crc for this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11591,"byte_end":11601,"line_start":86,"line_end":86,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<CrcReader<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Get the reader that is wrapped by this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11723,"byte_end":11730,"line_start":91,"line_end":91,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<CrcReader<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Get the reader that is wrapped by this CrcReader by reference.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11865,"byte_end":11872,"line_start":96,"line_end":96,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<CrcReader<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Get a mutable reference to the reader that is wrapped by this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11979,"byte_end":11984,"line_start":101,"line_end":101,"column_start":12,"column_end":17},"name":"reset","qualname":"<CrcReader<R>>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reset the Crc in this CrcReader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1220},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":20046,"byte_end":20060,"line_start":45,"line_end":45,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::bufread::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":289},{"krate":0,"index":291}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":20276,"byte_end":20279,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<R>>::new","value":"fn (r: R, level: ::Compression) -> DeflateEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":20940,"byte_end":20945,"line_start":74,"line_end":74,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":21115,"byte_end":21122,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":21367,"byte_end":21374,"line_start":88,"line_end":88,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":160},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":21502,"byte_end":21512,"line_start":93,"line_end":93,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":21783,"byte_end":21791,"line_start":101,"line_end":101,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22025,"byte_end":22034,"line_start":109,"line_end":109,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1226},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":23855,"byte_end":23869,"line_start":172,"line_end":172,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::bufread::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":297},{"krate":0,"index":299}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24157,"byte_end":24160,"line_start":184,"line_end":184,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"fn (r: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24700,"byte_end":24705,"line_start":200,"line_end":200,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24992,"byte_end":25002,"line_start":209,"line_end":209,"column_start":12,"column_end":22},"name":"reset_data","qualname":"<DeflateDecoder<R>>::reset_data","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder's data","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":25122,"byte_end":25129,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":25374,"byte_end":25381,"line_start":222,"line_end":222,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":25509,"byte_end":25519,"line_start":227,"line_end":227,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":25788,"byte_end":25796,"line_start":235,"line_end":235,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":196},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":25932,"byte_end":25941,"line_start":240,"line_end":240,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1232},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":27810,"byte_end":27824,"line_start":41,"line_end":41,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::read::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":305}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":220},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":28054,"byte_end":28057,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<R>>::new","value":"fn (r: R, level: ::Compression) -> DeflateEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":28789,"byte_end":28794,"line_start":66,"line_end":66,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":28990,"byte_end":28997,"line_start":72,"line_end":72,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":29263,"byte_end":29270,"line_start":80,"line_end":80,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":29611,"byte_end":29621,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":29920,"byte_end":29928,"line_start":97,"line_end":97,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":30163,"byte_end":30172,"line_start":105,"line_end":105,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1238},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":31943,"byte_end":31957,"line_start":168,"line_end":168,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::read::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":311}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32156,"byte_end":32159,"line_start":177,"line_end":177,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<R>>::new","value":"fn (r: R) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32477,"byte_end":32489,"line_start":185,"line_end":185,"column_start":12,"column_end":24},"name":"new_with_buf","qualname":"<DeflateDecoder<R>>::new_with_buf","value":"fn (r: R, buf: Vec<u8>) -> DeflateDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Same as `new`, but the intermediate buffer for data is specified.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":254},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":33209,"byte_end":33214,"line_start":203,"line_end":203,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":256},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":33410,"byte_end":33417,"line_start":209,"line_end":209,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":33683,"byte_end":33690,"line_start":217,"line_end":217,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":260},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34031,"byte_end":34041,"line_start":226,"line_end":226,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<DeflateDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34338,"byte_end":34346,"line_start":234,"line_end":234,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":264},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34483,"byte_end":34492,"line_start":239,"line_end":239,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1244},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":36077,"byte_end":36091,"line_start":35,"line_end":35,"column_start":12,"column_end":26},"name":"DeflateEncoder","qualname":"::deflate::write::DeflateEncoder","value":"DeflateEncoder {  }","parent":null,"children":[{"krate":0,"index":317}],"decl_id":null,"docs":" A DEFLATE encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":292},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":36421,"byte_end":36424,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateEncoder<W>>::new","value":"fn (w: W, level: ::Compression) -> DeflateEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will write compressed data to the stream\n given at the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":294},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":36653,"byte_end":36660,"line_start":52,"line_end":52,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateEncoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":36937,"byte_end":36944,"line_start":60,"line_end":60,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateEncoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":37822,"byte_end":37827,"line_start":80,"line_end":80,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateEncoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":38592,"byte_end":38602,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<DeflateEncoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":39437,"byte_end":39443,"line_start":120,"line_end":120,"column_start":12,"column_end":18},"name":"finish","qualname":"<DeflateEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":40133,"byte_end":40145,"line_start":137,"line_end":137,"column_start":12,"column_end":24},"name":"flush_finish","qualname":"<DeflateEncoder<W>>::flush_finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":306},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":40476,"byte_end":40484,"line_start":146,"line_end":146,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateEncoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been written to this compresor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":40727,"byte_end":40736,"line_start":154,"line_end":154,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateEncoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1250},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":42668,"byte_end":42682,"line_start":220,"line_end":220,"column_start":12,"column_end":26},"name":"DeflateDecoder","qualname":"::deflate::write::DeflateDecoder","value":"DeflateDecoder {  }","parent":null,"children":[{"krate":0,"index":323}],"decl_id":null,"docs":" A DEFLATE decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":322},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":42972,"byte_end":42975,"line_start":230,"line_end":230,"column_start":12,"column_end":15},"name":"new","qualname":"<DeflateDecoder<W>>::new","value":"fn (w: W) -> DeflateDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":43177,"byte_end":43184,"line_start":237,"line_end":237,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<DeflateDecoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":43461,"byte_end":43468,"line_start":245,"line_end":245,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<DeflateDecoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":44249,"byte_end":44254,"line_start":264,"line_end":264,"column_start":12,"column_end":17},"name":"reset","qualname":"<DeflateDecoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":45000,"byte_end":45010,"line_start":285,"line_end":285,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<DeflateDecoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":45824,"byte_end":45830,"line_start":304,"line_end":304,"column_start":12,"column_end":18},"name":"finish","qualname":"<DeflateDecoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":46197,"byte_end":46205,"line_start":314,"line_end":314,"column_start":12,"column_end":20},"name":"total_in","qualname":"<DeflateDecoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed for\n decompression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":46375,"byte_end":46384,"line_start":320,"line_end":320,"column_start":12,"column_end":21},"name":"total_out","qualname":"<DeflateDecoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has written to its\n output stream.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1256},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":70170,"byte_end":70179,"line_start":144,"line_end":144,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::bufread::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":331},{"krate":0,"index":333},{"krate":0,"index":335}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":470},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":70951,"byte_end":70954,"line_start":171,"line_end":171,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<R>>::new","value":"fn (r: R, level: Compression) -> GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":71709,"byte_end":71716,"line_start":196,"line_end":196,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":71983,"byte_end":71990,"line_start":204,"line_end":204,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":72133,"byte_end":72143,"line_start":209,"line_end":209,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying stream, consuming this encoder\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1262},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":74165,"byte_end":74174,"line_start":283,"line_end":283,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::bufread::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":341},{"krate":0,"index":343},{"krate":0,"index":345}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":74438,"byte_end":74441,"line_start":293,"line_end":293,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<R>>::new","value":"fn (mut r: R) -> GzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":75752,"byte_end":75758,"line_start":337,"line_end":337,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream, if it was valid\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":75896,"byte_end":75903,"line_start":342,"line_end":342,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":76170,"byte_end":76177,"line_start":350,"line_end":350,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":76322,"byte_end":76332,"line_start":355,"line_end":355,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1268},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":78625,"byte_end":78639,"line_start":429,"line_end":429,"column_start":12,"column_end":26},"name":"MultiGzDecoder","qualname":"::gz::bufread::MultiGzDecoder","value":"MultiGzDecoder {  }","parent":null,"children":[{"krate":0,"index":351},{"krate":0,"index":353},{"krate":0,"index":355}],"decl_id":null,"docs":" A gzip streaming decoder that decodes all members of a multistream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":78990,"byte_end":78993,"line_start":440,"line_end":440,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiGzDecoder<R>>::new","value":"fn (mut r: R) -> MultiGzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n (first) gzip header. If the gzip stream contains multiple members all will\n be decoded.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":80806,"byte_end":80812,"line_start":498,"line_end":498,"column_start":12,"column_end":18},"name":"header","qualname":"<MultiGzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current header associated with this stream, if it's valid\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":80950,"byte_end":80957,"line_start":503,"line_end":503,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MultiGzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":81224,"byte_end":81231,"line_start":511,"line_end":511,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiGzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":81376,"byte_end":81386,"line_start":516,"line_end":516,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MultiGzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1274},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":83195,"byte_end":83204,"line_start":36,"line_end":36,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::read::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":361}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":83756,"byte_end":83759,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<R>>::new","value":"fn (r: R, level: Compression) -> GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":83942,"byte_end":83949,"line_start":61,"line_end":61,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":84216,"byte_end":84223,"line_start":69,"line_end":69,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":84366,"byte_end":84376,"line_start":74,"line_end":74,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying stream, consuming this encoder\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1280},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85837,"byte_end":85846,"line_start":130,"line_end":130,"column_start":12,"column_end":21},"name":"GzDecoder","qualname":"::gz::read::GzDecoder","value":"GzDecoder {  }","parent":null,"children":[{"krate":0,"index":367}],"decl_id":null,"docs":" A gzip streaming decoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86038,"byte_end":86041,"line_start":137,"line_end":137,"column_start":12,"column_end":15},"name":"new","qualname":"<GzDecoder<R>>::new","value":"fn (r: R) -> GzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86275,"byte_end":86281,"line_start":146,"line_end":146,"column_start":12,"column_end":18},"name":"header","qualname":"<GzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the header associated with this stream, if it was valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86413,"byte_end":86420,"line_start":151,"line_end":151,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86687,"byte_end":86694,"line_start":159,"line_end":159,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86839,"byte_end":86849,"line_start":164,"line_end":164,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<GzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1286},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88812,"byte_end":88826,"line_start":226,"line_end":226,"column_start":12,"column_end":26},"name":"MultiGzDecoder","qualname":"::gz::read::MultiGzDecoder","value":"MultiGzDecoder {  }","parent":null,"children":[{"krate":0,"index":373}],"decl_id":null,"docs":" A gzip streaming decoder that decodes all members of a multistream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":89110,"byte_end":89113,"line_start":234,"line_end":234,"column_start":12,"column_end":15},"name":"new","qualname":"<MultiGzDecoder<R>>::new","value":"fn (r: R) -> MultiGzDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder from the given reader, immediately parsing the\n (first) gzip header. If the gzip stream contains multiple members all will\n be decoded.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":89373,"byte_end":89379,"line_start":243,"line_end":243,"column_start":12,"column_end":18},"name":"header","qualname":"<MultiGzDecoder<R>>::header","value":"fn (&self) -> Option<&GzHeader>","parent":null,"children":[],"decl_id":null,"docs":" Returns the current header associated with this stream, if it's valid.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":89511,"byte_end":89518,"line_start":248,"line_end":248,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<MultiGzDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":89785,"byte_end":89792,"line_start":256,"line_end":256,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<MultiGzDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":89937,"byte_end":89947,"line_start":261,"line_end":261,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<MultiGzDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1292},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":91258,"byte_end":91267,"line_start":37,"line_end":37,"column_start":12,"column_end":21},"name":"GzEncoder","qualname":"::gz::write::GzEncoder","value":"GzEncoder {  }","parent":null,"children":[{"krate":0,"index":379},{"krate":0,"index":381},{"krate":0,"index":383},{"krate":0,"index":385}],"decl_id":null,"docs":" A gzip streaming encoder","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":92014,"byte_end":92017,"line_start":61,"line_end":61,"column_start":12,"column_end":15},"name":"new","qualname":"<GzEncoder<W>>::new","value":"fn (w: W, level: Compression) -> GzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will use the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":92176,"byte_end":92183,"line_start":66,"line_end":66,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<GzEncoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":92440,"byte_end":92447,"line_start":74,"line_end":74,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<GzEncoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":662},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":93126,"byte_end":93136,"line_start":93,"line_end":93,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<GzEncoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":664},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":94524,"byte_end":94530,"line_start":129,"line_end":129,"column_start":12,"column_end":18},"name":"finish","qualname":"<GzEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Finish encoding this stream, returning the underlying writer once the\n encoding is done.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1298},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":55416,"byte_end":55424,"line_start":23,"line_end":23,"column_start":12,"column_end":20},"name":"GzHeader","qualname":"::gz::GzHeader","value":"GzHeader {  }","parent":null,"children":[{"krate":0,"index":389},{"krate":0,"index":391},{"krate":0,"index":393},{"krate":0,"index":395},{"krate":0,"index":397}],"decl_id":null,"docs":" A structure representing the header of a gzip stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":55667,"byte_end":55675,"line_start":33,"line_end":33,"column_start":12,"column_end":20},"name":"filename","qualname":"<GzHeader>::filename","value":"fn (&self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `filename` field of this gzip stream's header, if present.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":55843,"byte_end":55848,"line_start":38,"line_end":38,"column_start":12,"column_end":17},"name":"extra","qualname":"<GzHeader>::extra","value":"fn (&self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `extra` field of this gzip stream's header, if present.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":56015,"byte_end":56022,"line_start":43,"line_end":43,"column_start":12,"column_end":19},"name":"comment","qualname":"<GzHeader>::comment","value":"fn (&self) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Returns the `comment` field of this gzip stream's header, if present.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":56308,"byte_end":56324,"line_start":51,"line_end":51,"column_start":12,"column_end":28},"name":"operating_system","qualname":"<GzHeader>::operating_system","value":"fn (&self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Returns the `operating_system` field of this gzip stream's header.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":56946,"byte_end":56951,"line_start":64,"line_end":64,"column_start":12,"column_end":17},"name":"mtime","qualname":"<GzHeader>::mtime","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" This gives the most recent modification time of the original file being compressed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":57346,"byte_end":57363,"line_start":75,"line_end":75,"column_start":12,"column_end":29},"name":"mtime_as_datetime","qualname":"<GzHeader>::mtime_as_datetime","value":"fn (&self) -> Option<time::SystemTime>","parent":null,"children":[],"decl_id":null,"docs":" Returns the most recent modification time represented by a date-time type.\n Returns `None` if the value of the underlying counter is 0,\n indicating no time stamp is available.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1314},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":58432,"byte_end":58441,"line_start":113,"line_end":113,"column_start":12,"column_end":21},"name":"GzBuilder","qualname":"::gz::GzBuilder","value":"GzBuilder {  }","parent":null,"children":[{"krate":0,"index":399},{"krate":0,"index":401},{"krate":0,"index":403},{"krate":0,"index":405},{"krate":0,"index":407}],"decl_id":null,"docs":" A builder structure to create a new gzip Encoder.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":58676,"byte_end":58679,"line_start":123,"line_end":123,"column_start":12,"column_end":15},"name":"new","qualname":"<GzBuilder>::new","value":"fn () -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Create a new blank builder with no header by default.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":58939,"byte_end":58944,"line_start":134,"line_end":134,"column_start":12,"column_end":17},"name":"mtime","qualname":"<GzBuilder>::mtime","value":"fn (mut self, mtime: u32) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `mtime` field in the gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":59108,"byte_end":59124,"line_start":140,"line_end":140,"column_start":12,"column_end":28},"name":"operating_system","qualname":"<GzBuilder>::operating_system","value":"fn (mut self, os: u8) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `operating_system` field in the gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":59287,"byte_end":59292,"line_start":146,"line_end":146,"column_start":12,"column_end":17},"name":"extra","qualname":"<GzBuilder>::extra","value":"fn <T> (mut self, extra: T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `extra` field in the gzip header.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":59566,"byte_end":59574,"line_start":156,"line_end":156,"column_start":12,"column_end":20},"name":"filename","qualname":"<GzBuilder>::filename","value":"fn <T> (mut self, filename: T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `filename` field in the gzip header.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":59878,"byte_end":59885,"line_start":166,"line_end":166,"column_start":12,"column_end":19},"name":"comment","qualname":"<GzBuilder>::comment","value":"fn <T> (mut self, comment: T) -> GzBuilder","parent":null,"children":[],"decl_id":null,"docs":" Configure the `comment` field in the gzip header.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":60248,"byte_end":60253,"line_start":175,"line_end":175,"column_start":12,"column_end":17},"name":"write","qualname":"<GzBuilder>::write","value":"fn <W> (self, w: W, lvl: Compression) -> write::GzEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a writer encoder in the process.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":60597,"byte_end":60601,"line_start":183,"line_end":183,"column_start":12,"column_end":16},"name":"read","qualname":"<GzBuilder>::read","value":"fn <R> (self, r: R, lvl: Compression) -> read::GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a reader encoder in the process.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":60950,"byte_end":60958,"line_start":191,"line_end":191,"column_start":12,"column_end":20},"name":"buf_read","qualname":"<GzBuilder>::buf_read","value":"fn <R> (self, r: R, lvl: Compression) -> bufread::GzEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Consume this builder, creating a reader encoder in the process.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":742},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,105,111,46,114,115],"byte_start":96190,"byte_end":96195,"line_start":15,"line_end":15,"column_start":10,"column_end":15},"name":"Flush","qualname":"::zio::Ops::Flush","value":"type Flush: Flush;","parent":{"krate":0,"index":740},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1326},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":104051,"byte_end":104059,"line_start":25,"line_end":25,"column_start":12,"column_end":20},"name":"Compress","qualname":"::mem::Compress","value":"Compress {  }","parent":null,"children":[{"krate":0,"index":423}],"decl_id":null,"docs":" Raw in-memory compression stream for blocks of data.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1332},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":104704,"byte_end":104714,"line_start":42,"line_end":42,"column_start":12,"column_end":22},"name":"Decompress","qualname":"::mem::Decompress","value":"Decompress {  }","parent":null,"children":[{"krate":0,"index":425}],"decl_id":null,"docs":" Raw in-memory decompression stream for blocks of data.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":439},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":105579,"byte_end":105583,"line_start":73,"line_end":73,"column_start":5,"column_end":9},"name":"None","qualname":"::mem::FlushCompress::None","value":"FlushCompress::None","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" A typical parameter for passing to compression/decompression functions,\n this indicates that the underlying stream to decide how much data to\n accumulate before producing output in order to maximize compression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":443},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":106034,"byte_end":106038,"line_start":82,"line_end":82,"column_start":5,"column_end":9},"name":"Sync","qualname":"::mem::FlushCompress::Sync","value":"FlushCompress::Sync","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer and the output is\n aligned on a byte boundary so that the decompressor can get all input\n data available so far.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":447},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":106571,"byte_end":106578,"line_start":92,"line_end":92,"column_start":5,"column_end":12},"name":"Partial","qualname":"::mem::FlushCompress::Partial","value":"FlushCompress::Partial","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer, but the output is\n not aligned to a byte boundary.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":451},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":106922,"byte_end":106926,"line_start":99,"line_end":99,"column_start":5,"column_end":9},"name":"Full","qualname":"::mem::FlushCompress::Full","value":"FlushCompress::Full","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" All output is flushed as with `Flush::Sync` and the compression state is\n reset so decompression can restart from this point if previous\n compressed data has been damaged or if random access is desired.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":455},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":107154,"byte_end":107160,"line_start":105,"line_end":105,"column_start":5,"column_end":11},"name":"Finish","qualname":"::mem::FlushCompress::Finish","value":"FlushCompress::Finish","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":" Pending input is processed and pending output is flushed.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":459},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":107212,"byte_end":107226,"line_start":108,"line_end":108,"column_start":5,"column_end":19},"name":"_Nonexhaustive","qualname":"::mem::FlushCompress::_Nonexhaustive","value":"FlushCompress::_Nonexhaustive","parent":{"krate":0,"index":1356},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1356},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":105325,"byte_end":105338,"line_start":69,"line_end":69,"column_start":10,"column_end":23},"name":"FlushCompress","qualname":"::mem::FlushCompress","value":"FlushCompress::{None, Sync, Partial, Full, Finish, _Nonexhaustive}","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":443},{"krate":0,"index":447},{"krate":0,"index":451},{"krate":0,"index":455},{"krate":0,"index":459}],"decl_id":null,"docs":" Values which indicate the form of flushing to be used when compressing\n in-memory data.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":105316,"byte_end":107228,"line_start":69,"line_end":109,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":105316,"byte_end":107228,"line_start":69,"line_end":109,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":461},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":107637,"byte_end":107641,"line_start":118,"line_end":118,"column_start":5,"column_end":9},"name":"None","qualname":"::mem::FlushDecompress::None","value":"FlushDecompress::None","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" A typical parameter for passing to compression/decompression functions,\n this indicates that the underlying stream to decide how much data to\n accumulate before producing output in order to maximize compression.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":465},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":108092,"byte_end":108096,"line_start":127,"line_end":127,"column_start":5,"column_end":9},"name":"Sync","qualname":"::mem::FlushDecompress::Sync","value":"FlushDecompress::Sync","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" All pending output is flushed to the output buffer and the output is\n aligned on a byte boundary so that the decompressor can get all input\n data available so far.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":469},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":108324,"byte_end":108330,"line_start":133,"line_end":133,"column_start":5,"column_end":11},"name":"Finish","qualname":"::mem::FlushDecompress::Finish","value":"FlushDecompress::Finish","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":" Pending input is processed and pending output is flushed.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":473},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":108382,"byte_end":108396,"line_start":136,"line_end":136,"column_start":5,"column_end":19},"name":"_Nonexhaustive","qualname":"::mem::FlushDecompress::_Nonexhaustive","value":"FlushDecompress::_Nonexhaustive","parent":{"krate":0,"index":1376},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1376},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":107381,"byte_end":107396,"line_start":114,"line_end":114,"column_start":10,"column_end":25},"name":"FlushDecompress","qualname":"::mem::FlushDecompress","value":"FlushDecompress::{None, Sync, Finish, _Nonexhaustive}","parent":null,"children":[{"krate":0,"index":461},{"krate":0,"index":465},{"krate":0,"index":469},{"krate":0,"index":473}],"decl_id":null,"docs":" Values which indicate the form of flushing to be used when\n decompressing in-memory data.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":107372,"byte_end":108398,"line_start":114,"line_end":137,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":107372,"byte_end":108398,"line_start":114,"line_end":137,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":1396},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":108555,"byte_end":108570,"line_start":142,"line_end":142,"column_start":12,"column_end":27},"name":"DecompressError","qualname":"::mem::DecompressError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when a decompression object finds that the input stream of\n bytes was not a valid input stream of bytes.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1402},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":108707,"byte_end":108720,"line_start":147,"line_end":147,"column_start":12,"column_end":25},"name":"CompressError","qualname":"::mem::CompressError","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error returned when a compression object is used incorrectly or otherwise\n generates an error.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":483},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":109077,"byte_end":109079,"line_start":157,"line_end":157,"column_start":5,"column_end":7},"name":"Ok","qualname":"::mem::Status::Ok","value":"Status::Ok","parent":{"krate":0,"index":1408},"children":[],"decl_id":null,"docs":" Indicates success.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":485},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":109558,"byte_end":109566,"line_start":168,"line_end":168,"column_start":5,"column_end":13},"name":"BufError","qualname":"::mem::Status::BufError","value":"Status::BufError","parent":{"krate":0,"index":1408},"children":[],"decl_id":null,"docs":" Indicates that forward progress is not possible due to input or output\n buffers being empty.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":487},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":109848,"byte_end":109857,"line_start":175,"line_end":175,"column_start":5,"column_end":14},"name":"StreamEnd","qualname":"::mem::Status::StreamEnd","value":"Status::StreamEnd","parent":{"krate":0,"index":1408},"children":[],"decl_id":null,"docs":" Indicates that all input has been consumed and all output bytes have\n been written. Decompression/compression should not be called again.","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1408},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":108885,"byte_end":108891,"line_start":152,"line_end":152,"column_start":10,"column_end":16},"name":"Status","qualname":"::mem::Status","value":"Status::{Ok, BufError, StreamEnd}","parent":null,"children":[{"krate":0,"index":483},{"krate":0,"index":485},{"krate":0,"index":487}],"decl_id":null,"docs":" Possible status results of compressing some data or successfully\n decompressing a block of data.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":108876,"byte_end":109860,"line_start":152,"line_end":176,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":108876,"byte_end":109860,"line_start":152,"line_end":176,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":862},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":110181,"byte_end":110184,"line_start":184,"line_end":184,"column_start":12,"column_end":15},"name":"new","qualname":"<Compress>::new","value":"fn (level: Compression, zlib_header: bool) -> Compress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new object ready for compressing data that it's given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":864},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":111341,"byte_end":111349,"line_start":211,"line_end":211,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Compress>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of input bytes which have been processed by\n this compression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":111522,"byte_end":111531,"line_start":217,"line_end":217,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Compress>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of output bytes which have been produced by\n this compression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":111761,"byte_end":111766,"line_start":224,"line_end":224,"column_start":12,"column_end":17},"name":"reset","qualname":"<Compress>::reset","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Quickly resets this compressor without having to reallocate anything.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":112379,"byte_end":112387,"line_start":239,"line_end":239,"column_start":12,"column_end":20},"name":"compress","qualname":"<Compress>::compress","value":"fn (&mut self, input: &[u8], output: &mut [u8], flush: FlushCompress) -> Result<Status, CompressError>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the input data into the output, consuming only as much\n input as needed and writing as much output as possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":114079,"byte_end":114091,"line_start":276,"line_end":276,"column_start":12,"column_end":24},"name":"compress_vec","qualname":"<Compress>::compress_vec","value":"fn (&mut self, input: &[u8], output: &mut Vec<u8>, flush: FlushCompress) -> Result<Status, CompressError>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the input data into the extra space of the output, consuming\n only as much input as needed and writing as much output as possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":114991,"byte_end":114994,"line_start":302,"line_end":302,"column_start":12,"column_end":15},"name":"new","qualname":"<Decompress>::new","value":"fn (zlib_header: bool) -> Decompress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new object ready for decompressing data that it's given.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":115900,"byte_end":115908,"line_start":325,"line_end":325,"column_start":12,"column_end":20},"name":"total_in","qualname":"<Decompress>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of input bytes which have been processed by\n this decompression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":116083,"byte_end":116092,"line_start":331,"line_end":331,"column_start":12,"column_end":21},"name":"total_out","qualname":"<Decompress>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the total number of output bytes which have been produced by\n this decompression object.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":117289,"byte_end":117299,"line_start":357,"line_end":357,"column_start":12,"column_end":22},"name":"decompress","qualname":"<Decompress>::decompress","value":"fn (&mut self, input: &[u8], output: &mut [u8], flush: FlushDecompress) -> Result<Status, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses the input data into the output, consuming only as much\n input as needed and writing as much output as possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":119256,"byte_end":119270,"line_start":401,"line_end":401,"column_start":12,"column_end":26},"name":"decompress_vec","qualname":"<Decompress>::decompress_vec","value":"fn (&mut self, input: &[u8], output: &mut Vec<u8>, flush: FlushDecompress) -> Result<Status, DecompressError>","parent":null,"children":[],"decl_id":null,"docs":" Decompresses the input data into the extra space in the output vector\n specified by `output`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":120336,"byte_end":120341,"line_start":429,"line_end":429,"column_start":12,"column_end":17},"name":"reset","qualname":"<Decompress>::reset","value":"fn (&mut self, zlib_header: bool) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Performs the equivalent of replacing this decompression state with a\n freshly allocated copy.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1428},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":130730,"byte_end":130741,"line_start":41,"line_end":41,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::bufread::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":491},{"krate":0,"index":493}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":946},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":130954,"byte_end":130957,"line_start":50,"line_end":50,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<R>>::new","value":"fn (r: R, level: ::Compression) -> ZlibEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":952},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":131604,"byte_end":131609,"line_start":70,"line_end":70,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":954},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":131779,"byte_end":131786,"line_start":76,"line_end":76,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying reader\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":956},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":132031,"byte_end":132038,"line_start":84,"line_end":84,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":132166,"byte_end":132176,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":132447,"byte_end":132455,"line_start":97,"line_end":97,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":132689,"byte_end":132698,"line_start":105,"line_end":105,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1434},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":134486,"byte_end":134497,"line_start":170,"line_end":170,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::bufread::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":499},{"krate":0,"index":501}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":134678,"byte_end":134681,"line_start":178,"line_end":178,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<R>>::new","value":"fn (r: R) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":135311,"byte_end":135316,"line_start":198,"line_end":198,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":135486,"byte_end":135493,"line_start":204,"line_end":204,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":135738,"byte_end":135745,"line_start":212,"line_end":212,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":135873,"byte_end":135883,"line_start":217,"line_end":217,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":136152,"byte_end":136160,"line_start":225,"line_end":225,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":992},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":136296,"byte_end":136305,"line_start":230,"line_end":230,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1440},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":138045,"byte_end":138056,"line_start":38,"line_end":38,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::read::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":507}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1016},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":138280,"byte_end":138283,"line_start":45,"line_end":45,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<R>>::new","value":"fn (r: R, level: ::Compression) -> ZlibEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1020},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":139003,"byte_end":139008,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":139204,"byte_end":139211,"line_start":69,"line_end":69,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1024},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":139477,"byte_end":139484,"line_start":77,"line_end":77,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":139825,"byte_end":139835,"line_start":86,"line_end":86,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1028},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":140134,"byte_end":140142,"line_start":94,"line_end":94,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been read into this compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1030},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":140377,"byte_end":140386,"line_start":102,"line_end":102,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1446},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":142115,"byte_end":142126,"line_start":167,"line_end":167,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::read::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":513}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1044},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":142318,"byte_end":142321,"line_start":175,"line_end":175,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<R>>::new","value":"fn (r: R) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1046},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":142648,"byte_end":142660,"line_start":183,"line_end":183,"column_start":12,"column_end":24},"name":"new_with_buf","qualname":"<ZlibDecoder<R>>::new_with_buf","value":"fn (r: R, buf: Vec<u8>) -> ZlibDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Same as `new`, but the intermediate buffer for data is specified.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1050},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":143368,"byte_end":143373,"line_start":201,"line_end":201,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<R>>::reset","value":"fn (&mut self, r: R) -> R","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the input\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1052},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":143569,"byte_end":143576,"line_start":207,"line_end":207,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1054},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":143842,"byte_end":143849,"line_start":215,"line_end":215,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1056},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":144190,"byte_end":144200,"line_start":224,"line_end":224,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<ZlibDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1058},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":144497,"byte_end":144505,"line_start":232,"line_end":232,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<R>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1060},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":144642,"byte_end":144651,"line_start":237,"line_end":237,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<R>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has produced.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1452},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":146245,"byte_end":146256,"line_start":36,"line_end":36,"column_start":12,"column_end":23},"name":"ZlibEncoder","qualname":"::zlib::write::ZlibEncoder","value":"ZlibEncoder {  }","parent":null,"children":[{"krate":0,"index":519}],"decl_id":null,"docs":" A ZLIB encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":146584,"byte_end":146587,"line_start":47,"line_end":47,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibEncoder<W>>::new","value":"fn (w: W, level: ::Compression) -> ZlibEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will write compressed data to the stream\n given at the given compression level.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":146809,"byte_end":146816,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibEncoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":147093,"byte_end":147100,"line_start":62,"line_end":62,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibEncoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":147915,"byte_end":147920,"line_start":81,"line_end":81,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibEncoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this encoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":148685,"byte_end":148695,"line_start":102,"line_end":102,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<ZlibEncoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":149530,"byte_end":149536,"line_start":121,"line_end":121,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZlibEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":150226,"byte_end":150238,"line_start":138,"line_end":138,"column_start":12,"column_end":24},"name":"flush_finish","qualname":"<ZlibEncoder<W>>::flush_finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":150569,"byte_end":150577,"line_start":147,"line_end":147,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibEncoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that have been written to this compresor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1104},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":150820,"byte_end":150829,"line_start":155,"line_end":155,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibEncoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the compressor has produced.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1458},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":152708,"byte_end":152719,"line_start":224,"line_end":224,"column_start":12,"column_end":23},"name":"ZlibDecoder","qualname":"::zlib::write::ZlibDecoder","value":"ZlibDecoder {  }","parent":null,"children":[{"krate":0,"index":525}],"decl_id":null,"docs":" A ZLIB decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1118},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":153006,"byte_end":153009,"line_start":234,"line_end":234,"column_start":12,"column_end":15},"name":"new","qualname":"<ZlibDecoder<W>>::new","value":"fn (w: W) -> ZlibDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will write uncompressed data to the stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1120},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":153204,"byte_end":153211,"line_start":241,"line_end":241,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<ZlibDecoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1122},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":153488,"byte_end":153495,"line_start":249,"line_end":249,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<ZlibDecoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1124},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":154109,"byte_end":154114,"line_start":265,"line_end":265,"column_start":12,"column_end":17},"name":"reset","qualname":"<ZlibDecoder<W>>::reset","value":"fn (&mut self, w: W) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Resets the state of this decoder entirely, swapping out the output\n stream for another.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1126},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":154895,"byte_end":154905,"line_start":286,"line_end":286,"column_start":12,"column_end":22},"name":"try_finish","qualname":"<ZlibDecoder<W>>::try_finish","value":"fn (&mut self) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Attempt to finish this output stream, writing out final chunks of data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1128},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":155719,"byte_end":155725,"line_start":305,"line_end":305,"column_start":12,"column_end":18},"name":"finish","qualname":"<ZlibDecoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1130},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":156092,"byte_end":156100,"line_start":315,"line_end":315,"column_start":12,"column_end":20},"name":"total_in","qualname":"<ZlibDecoder<W>>::total_in","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has consumed for\n decompression.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1132},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":156270,"byte_end":156279,"line_start":321,"line_end":321,"column_start":12,"column_end":21},"name":"total_out","qualname":"<ZlibDecoder<W>>::total_out","value":"fn (&self) -> u64","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bytes that the decompressor has written to its\n output stream.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1144},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3756,"byte_end":3760,"line_start":109,"line_end":109,"column_start":9,"column_end":13},"name":"read","qualname":"::read","value":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1146},{"krate":0,"index":1148},{"krate":0,"index":1150},{"krate":0,"index":1152},{"krate":0,"index":1154},{"krate":0,"index":1156},{"krate":0,"index":1158}],"decl_id":null,"docs":" Types which operate over [`Read`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1160},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4207,"byte_end":4212,"line_start":123,"line_end":123,"column_start":9,"column_end":14},"name":"write","qualname":"::write","value":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1162},{"krate":0,"index":1164},{"krate":0,"index":1166},{"krate":0,"index":1168},{"krate":0,"index":1170}],"decl_id":null,"docs":" Types which operate over [`Write`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1172},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4599,"byte_end":4606,"line_start":135,"line_end":135,"column_start":9,"column_end":16},"name":"bufread","qualname":"::bufread","value":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/flate2-1.0.1/src/lib.rs","parent":null,"children":[{"krate":0,"index":1174},{"krate":0,"index":1176},{"krate":0,"index":1178},{"krate":0,"index":1180},{"krate":0,"index":1182},{"krate":0,"index":1184},{"krate":0,"index":1186}],"decl_id":null,"docs":" Types which operate over [`BufRead`] streams, both encoders and decoders for\n various formats.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1464},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5783,"byte_end":5794,"line_start":165,"line_end":165,"column_start":12,"column_end":23},"name":"Compression","qualname":"::Compression","value":"","parent":null,"children":[],"decl_id":null,"docs":" When compressing data, the compression level can be specified by a value in\n this enum.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5772,"byte_end":5800,"line_start":165,"line_end":165,"column_start":1,"column_end":29}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5772,"byte_end":5800,"line_start":165,"line_end":165,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1194},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6082,"byte_end":6085,"line_start":173,"line_end":173,"column_start":12,"column_end":15},"name":"new","qualname":"<Compression>::new","value":"fn (level: u32) -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Creates a new description of the compression level with an explicitly\n specified integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1196},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6266,"byte_end":6270,"line_start":179,"line_end":179,"column_start":12,"column_end":16},"name":"none","qualname":"<Compression>::none","value":"fn () -> Compression","parent":null,"children":[],"decl_id":null,"docs":" No compression is to be performed, this may actually inflate data\n slightly when encoding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1198},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6380,"byte_end":6384,"line_start":184,"line_end":184,"column_start":12,"column_end":16},"name":"fast","qualname":"<Compression>::fast","value":"fn () -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Optimize for the best speed of encoding.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1200},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6498,"byte_end":6502,"line_start":189,"line_end":189,"column_start":12,"column_end":16},"name":"best","qualname":"<Compression>::best","value":"fn () -> Compression","parent":null,"children":[],"decl_id":null,"docs":" Optimize for the size of data being encoded.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1202},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6662,"byte_end":6667,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"name":"level","qualname":"<Compression>::level","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns an integer representing the compression level, typically on a\n scale of 0-9\n","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":7464,"byte_end":7473,"line_start":23,"line_end":23,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":7806,"byte_end":7815,"line_start":32,"line_end":32,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":56}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":8142,"byte_end":8151,"line_start":47,"line_end":47,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":8518,"byte_end":8527,"line_start":67,"line_end":67,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":9078,"byte_end":9087,"line_start":84,"line_end":84,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":74},{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":10030,"byte_end":10033,"line_start":27,"line_end":27,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11226,"byte_end":11235,"line_start":69,"line_end":69,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":104}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11410,"byte_end":11419,"line_start":79,"line_end":79,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":114},{"krate":0,"index":116}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12056,"byte_end":12065,"line_start":106,"line_end":106,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":120}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12274,"byte_end":12283,"line_start":114,"line_end":114,"column_start":30,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":124},{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":20119,"byte_end":20133,"line_start":51,"line_end":51,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":20537,"byte_end":20551,"line_start":66,"line_end":66,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22116,"byte_end":22130,"line_start":114,"line_end":114,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":168}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22387,"byte_end":22401,"line_start":123,"line_end":123,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24033,"byte_end":24047,"line_start":181,"line_end":181,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":180}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24304,"byte_end":24318,"line_start":192,"line_end":192,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190},{"krate":0,"index":192},{"krate":0,"index":194},{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26023,"byte_end":26037,"line_start":245,"line_end":245,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":200}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26296,"byte_end":26310,"line_start":254,"line_end":254,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":204},{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":27897,"byte_end":27911,"line_start":45,"line_end":45,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":220}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":28236,"byte_end":28250,"line_start":55,"line_end":55,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":30252,"byte_end":30266,"line_start":110,"line_end":110,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":238}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":30485,"byte_end":30499,"line_start":119,"line_end":119,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":242},{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32032,"byte_end":32046,"line_start":174,"line_end":174,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":250}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32663,"byte_end":32677,"line_start":192,"line_end":192,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262},{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34572,"byte_end":34586,"line_start":244,"line_end":244,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34807,"byte_end":34821,"line_start":253,"line_end":253,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":36159,"byte_end":36173,"line_start":39,"line_end":39,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":292},{"krate":0,"index":294},{"krate":0,"index":296},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":304},{"krate":0,"index":306},{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":40823,"byte_end":40837,"line_start":159,"line_end":159,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":312},{"krate":0,"index":314}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":41270,"byte_end":41284,"line_start":177,"line_end":177,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":42753,"byte_end":42767,"line_start":225,"line_end":225,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":322},{"krate":0,"index":324},{"krate":0,"index":326},{"krate":0,"index":328},{"krate":0,"index":330},{"krate":0,"index":332},{"krate":0,"index":334},{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":46471,"byte_end":46485,"line_start":325,"line_end":325,"column_start":26,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":340},{"krate":0,"index":342}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":46918,"byte_end":46932,"line_start":343,"line_end":343,"column_start":32,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":346}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,102,102,105,46,114,115],"byte_start":51556,"byte_end":51569,"line_start":143,"line_end":143,"column_start":32,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,102,102,105,46,114,115],"byte_start":51735,"byte_end":51748,"line_start":149,"line_end":149,"column_start":22,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,102,102,105,46,114,115],"byte_start":51917,"byte_end":51930,"line_start":157,"line_end":157,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":380},{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,102,102,105,46,114,115],"byte_start":52073,"byte_end":52086,"line_start":165,"line_end":165,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":386}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":70591,"byte_end":70600,"line_start":163,"line_end":163,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":71628,"byte_end":71637,"line_start":194,"line_end":194,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":480}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":72237,"byte_end":72246,"line_start":214,"line_end":214,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":72936,"byte_end":72945,"line_start":238,"line_end":238,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":488},{"krate":0,"index":490}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":74314,"byte_end":74323,"line_start":290,"line_end":290,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":494},{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":75654,"byte_end":75663,"line_start":335,"line_end":335,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":504},{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":76426,"byte_end":76435,"line_start":360,"line_end":360,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":76890,"byte_end":76899,"line_start":376,"line_end":376,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":514},{"krate":0,"index":516}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":78779,"byte_end":78793,"line_start":436,"line_end":436,"column_start":18,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":520},{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":80697,"byte_end":80711,"line_start":496,"line_end":496,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":532}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":81480,"byte_end":81494,"line_start":521,"line_end":521,"column_start":27,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":536}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":82026,"byte_end":82040,"line_start":538,"line_end":538,"column_start":36,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":540},{"krate":0,"index":542}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":83396,"byte_end":83405,"line_start":46,"line_end":46,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":83861,"byte_end":83870,"line_start":59,"line_end":59,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":574}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":84467,"byte_end":84476,"line_start":79,"line_end":79,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":84616,"byte_end":84625,"line_start":85,"line_end":85,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":582},{"krate":0,"index":584}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85914,"byte_end":85923,"line_start":134,"line_end":134,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":588}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86176,"byte_end":86185,"line_start":144,"line_end":144,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86940,"byte_end":86949,"line_start":169,"line_end":169,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":602}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":87089,"byte_end":87098,"line_start":175,"line_end":175,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":606},{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88899,"byte_end":88913,"line_start":230,"line_end":230,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":89263,"byte_end":89277,"line_start":241,"line_end":241,"column_start":9,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":90038,"byte_end":90052,"line_start":266,"line_end":266,"column_start":24,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":626}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":90192,"byte_end":90206,"line_start":272,"line_end":272,"column_start":33,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":630},{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":91654,"byte_end":91663,"line_start":53,"line_end":53,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":656},{"krate":0,"index":658},{"krate":0,"index":660},{"krate":0,"index":662},{"krate":0,"index":664},{"krate":0,"index":666}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":94888,"byte_end":94897,"line_start":143,"line_end":143,"column_start":26,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":670},{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":95546,"byte_end":95555,"line_start":167,"line_end":167,"column_start":32,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":95778,"byte_end":95787,"line_start":176,"line_end":176,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":680}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":55566,"byte_end":55574,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":684},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":690},{"krate":0,"index":692},{"krate":0,"index":694}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":58591,"byte_end":58600,"line_start":121,"line_end":121,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":698},{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":712},{"krate":0,"index":714},{"krate":0,"index":716}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,105,111,46,114,115],"byte_start":96538,"byte_end":96546,"line_start":24,"line_end":24,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,105,111,46,114,115],"byte_start":97090,"byte_end":97100,"line_start":38,"line_end":38,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,105,111,46,114,115],"byte_start":97722,"byte_end":97735,"line_start":58,"line_end":58,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":786},{"krate":0,"index":788},{"krate":0,"index":790}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,105,111,46,114,115],"byte_start":97936,"byte_end":97951,"line_start":72,"line_end":72,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":794},{"krate":0,"index":796},{"krate":0,"index":798}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,105,111,46,114,115],"byte_start":99573,"byte_end":99579,"line_start":127,"line_end":127,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":804},{"krate":0,"index":806},{"krate":0,"index":808},{"krate":0,"index":810},{"krate":0,"index":812},{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":818}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,105,111,46,114,115],"byte_start":101144,"byte_end":101150,"line_start":187,"line_end":187,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":822},{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,105,111,46,114,115],"byte_start":103181,"byte_end":103187,"line_start":237,"line_end":237,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":104955,"byte_end":104961,"line_start":54,"line_end":54,"column_start":36,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":105003,"byte_end":105009,"line_start":55,"line_end":55,"column_start":36,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":109867,"byte_end":109875,"line_start":178,"line_end":178,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":862},{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":868},{"krate":0,"index":870},{"krate":0,"index":872}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":114766,"byte_end":114776,"line_start":297,"line_end":297,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":876},{"krate":0,"index":878},{"krate":0,"index":880},{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":120957,"byte_end":120972,"line_start":453,"line_end":453,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121081,"byte_end":121086,"line_start":457,"line_end":457,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":896}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121221,"byte_end":121236,"line_start":463,"line_end":463,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121356,"byte_end":121369,"line_start":469,"line_end":469,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":904}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121474,"byte_end":121479,"line_start":473,"line_end":473,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":908}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121612,"byte_end":121625,"line_start":479,"line_end":479,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":912}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121749,"byte_end":121760,"line_start":485,"line_end":485,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":916}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121887,"byte_end":121900,"line_start":490,"line_end":490,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":122037,"byte_end":122043,"line_start":496,"line_end":496,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":924}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":130800,"byte_end":130811,"line_start":47,"line_end":47,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":946}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":131204,"byte_end":131215,"line_start":62,"line_end":62,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":952},{"krate":0,"index":954},{"krate":0,"index":956},{"krate":0,"index":958},{"krate":0,"index":960},{"krate":0,"index":962}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":132780,"byte_end":132791,"line_start":110,"line_end":110,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":966}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":133045,"byte_end":133056,"line_start":119,"line_end":119,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":970},{"krate":0,"index":972}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":134557,"byte_end":134568,"line_start":175,"line_end":175,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":976}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":134918,"byte_end":134929,"line_start":190,"line_end":190,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":982},{"krate":0,"index":984},{"krate":0,"index":986},{"krate":0,"index":988},{"krate":0,"index":990},{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":136387,"byte_end":136398,"line_start":235,"line_end":235,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":996}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":136654,"byte_end":136665,"line_start":244,"line_end":244,"column_start":36,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1000},{"krate":0,"index":1002}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":138126,"byte_end":138137,"line_start":42,"line_end":42,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":138453,"byte_end":138464,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1020},{"krate":0,"index":1022},{"krate":0,"index":1024},{"krate":0,"index":1026},{"krate":0,"index":1028},{"krate":0,"index":1030}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":140466,"byte_end":140477,"line_start":107,"line_end":107,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1034}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":140693,"byte_end":140704,"line_start":116,"line_end":116,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1038},{"krate":0,"index":1040}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":142197,"byte_end":142208,"line_start":172,"line_end":172,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1044},{"krate":0,"index":1046}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":142825,"byte_end":142836,"line_start":190,"line_end":190,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1050},{"krate":0,"index":1052},{"krate":0,"index":1054},{"krate":0,"index":1056},{"krate":0,"index":1058},{"krate":0,"index":1060}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":144731,"byte_end":144742,"line_start":242,"line_end":242,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1064}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":144960,"byte_end":144971,"line_start":251,"line_end":251,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1068},{"krate":0,"index":1070}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":146325,"byte_end":146336,"line_start":41,"line_end":41,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1088},{"krate":0,"index":1090},{"krate":0,"index":1092},{"krate":0,"index":1094},{"krate":0,"index":1096},{"krate":0,"index":1098},{"krate":0,"index":1100},{"krate":0,"index":1102},{"krate":0,"index":1104}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":150916,"byte_end":150927,"line_start":160,"line_end":160,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1108},{"krate":0,"index":1110}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":151349,"byte_end":151360,"line_start":178,"line_end":178,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1114}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":152790,"byte_end":152801,"line_start":229,"line_end":229,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1118},{"krate":0,"index":1120},{"krate":0,"index":1122},{"krate":0,"index":1124},{"krate":0,"index":1126},{"krate":0,"index":1128},{"krate":0,"index":1130},{"krate":0,"index":1132}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":156366,"byte_end":156377,"line_start":326,"line_end":326,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1136},{"krate":0,"index":1138}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":156807,"byte_end":156818,"line_start":344,"line_end":344,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1142}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5807,"byte_end":5818,"line_start":167,"line_end":167,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1194},{"krate":0,"index":1196},{"krate":0,"index":1198},{"krate":0,"index":1200},{"krate":0,"index":1202}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6725,"byte_end":6736,"line_start":200,"line_end":200,"column_start":18,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1206}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":7464,"byte_end":7473,"line_start":23,"line_end":23,"column_start":31,"column_end":40},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":46},"to":{"krate":2,"index":7698}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":7806,"byte_end":7815,"line_start":32,"line_end":32,"column_start":15,"column_end":24},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":46},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":8142,"byte_end":8151,"line_start":47,"line_end":47,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":46},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":8518,"byte_end":8527,"line_start":67,"line_end":67,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":46},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,98,117,102,114,101,97,100,101,114,46,114,115],"byte_start":9078,"byte_end":9087,"line_start":84,"line_end":84,"column_start":27,"column_end":36},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":46},"to":{"krate":1,"index":4314}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":10030,"byte_end":10033,"line_start":27,"line_end":27,"column_start":6,"column_end":9},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":1208},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11226,"byte_end":11235,"line_start":69,"line_end":69,"column_start":15,"column_end":24},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":1214},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":11410,"byte_end":11419,"line_start":79,"line_end":79,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":1214},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12056,"byte_end":12065,"line_start":106,"line_end":106,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":1214},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,99,114,99,46,114,115],"byte_start":12274,"byte_end":12283,"line_start":114,"line_end":114,"column_start":30,"column_end":39},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":1214},"to":{"krate":1,"index":4314}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":20119,"byte_end":20133,"line_start":51,"line_end":51,"column_start":18,"column_end":32},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":0,"index":1220},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":20537,"byte_end":20551,"line_start":66,"line_end":66,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":1220},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22116,"byte_end":22130,"line_start":114,"line_end":114,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":1220},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22387,"byte_end":22401,"line_start":123,"line_end":123,"column_start":36,"column_end":50},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":1220},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24033,"byte_end":24047,"line_start":181,"line_end":181,"column_start":18,"column_end":32},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":1226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24304,"byte_end":24318,"line_start":192,"line_end":192,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":1226},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26023,"byte_end":26037,"line_start":245,"line_end":245,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":1226},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,98,117,102,114,101,97,100,46,114,115],"byte_start":26296,"byte_end":26310,"line_start":254,"line_end":254,"column_start":36,"column_end":50},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":1226},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":27897,"byte_end":27911,"line_start":45,"line_end":45,"column_start":15,"column_end":29},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":1232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":28236,"byte_end":28250,"line_start":55,"line_end":55,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":1232},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":30252,"byte_end":30266,"line_start":110,"line_end":110,"column_start":24,"column_end":38},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":1232},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":30485,"byte_end":30499,"line_start":119,"line_end":119,"column_start":33,"column_end":47},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":1232},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32032,"byte_end":32046,"line_start":174,"line_end":174,"column_start":15,"column_end":29},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":1238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":32663,"byte_end":32677,"line_start":192,"line_end":192,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":1238},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34572,"byte_end":34586,"line_start":244,"line_end":244,"column_start":24,"column_end":38},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":1238},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,114,101,97,100,46,114,115],"byte_start":34807,"byte_end":34821,"line_start":253,"line_end":253,"column_start":33,"column_end":47},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":1238},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":36159,"byte_end":36173,"line_start":39,"line_end":39,"column_start":16,"column_end":30},"kind":{"variant":"Impl","fields":[26]},"from":{"krate":0,"index":1244},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":40823,"byte_end":40837,"line_start":159,"line_end":159,"column_start":26,"column_end":40},"kind":{"variant":"Impl","fields":[27]},"from":{"krate":0,"index":1244},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":41270,"byte_end":41284,"line_start":177,"line_end":177,"column_start":32,"column_end":46},"kind":{"variant":"Impl","fields":[28]},"from":{"krate":0,"index":1244},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":42753,"byte_end":42767,"line_start":225,"line_end":225,"column_start":16,"column_end":30},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":0,"index":1250},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":46471,"byte_end":46485,"line_start":325,"line_end":325,"column_start":26,"column_end":40},"kind":{"variant":"Impl","fields":[30]},"from":{"krate":0,"index":1250},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,100,101,102,108,97,116,101,47,119,114,105,116,101,46,114,115],"byte_start":46918,"byte_end":46932,"line_start":343,"line_end":343,"column_start":32,"column_end":46},"kind":{"variant":"Impl","fields":[31]},"from":{"krate":0,"index":1250},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,102,102,105,46,114,115],"byte_start":51556,"byte_end":51569,"line_start":143,"line_end":143,"column_start":32,"column_end":45},"kind":{"variant":"Impl","fields":[32]},"from":{"krate":0,"index":368},"to":{"krate":2,"index":7698}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,102,102,105,46,114,115],"byte_start":51735,"byte_end":51748,"line_start":149,"line_end":149,"column_start":22,"column_end":35},"kind":{"variant":"Impl","fields":[33]},"from":{"krate":0,"index":368},"to":{"krate":2,"index":2596}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,102,102,105,46,114,115],"byte_start":51917,"byte_end":51930,"line_start":157,"line_end":157,"column_start":20,"column_end":33},"kind":{"variant":"Impl","fields":[34]},"from":{"krate":0,"index":368},"to":{"krate":2,"index":1968}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,102,102,105,46,114,115],"byte_start":52073,"byte_end":52086,"line_start":165,"line_end":165,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[35]},"from":{"krate":0,"index":368},"to":{"krate":2,"index":1986}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":70591,"byte_end":70600,"line_start":163,"line_end":163,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":0,"index":1256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":71628,"byte_end":71637,"line_start":194,"line_end":194,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[37]},"from":{"krate":0,"index":1256},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":72237,"byte_end":72246,"line_start":214,"line_end":214,"column_start":27,"column_end":36},"kind":{"variant":"Impl","fields":[38]},"from":{"krate":0,"index":1256},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":72936,"byte_end":72945,"line_start":238,"line_end":238,"column_start":36,"column_end":45},"kind":{"variant":"Impl","fields":[39]},"from":{"krate":0,"index":1256},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":74314,"byte_end":74323,"line_start":290,"line_end":290,"column_start":18,"column_end":27},"kind":{"variant":"Impl","fields":[40]},"from":{"krate":0,"index":1262},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":75654,"byte_end":75663,"line_start":335,"line_end":335,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[41]},"from":{"krate":0,"index":1262},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":76426,"byte_end":76435,"line_start":360,"line_end":360,"column_start":27,"column_end":36},"kind":{"variant":"Impl","fields":[42]},"from":{"krate":0,"index":1262},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":76890,"byte_end":76899,"line_start":376,"line_end":376,"column_start":36,"column_end":45},"kind":{"variant":"Impl","fields":[43]},"from":{"krate":0,"index":1262},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":78779,"byte_end":78793,"line_start":436,"line_end":436,"column_start":18,"column_end":32},"kind":{"variant":"Impl","fields":[44]},"from":{"krate":0,"index":1268},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":80697,"byte_end":80711,"line_start":496,"line_end":496,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":0,"index":1268},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":81480,"byte_end":81494,"line_start":521,"line_end":521,"column_start":27,"column_end":41},"kind":{"variant":"Impl","fields":[46]},"from":{"krate":0,"index":1268},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,98,117,102,114,101,97,100,46,114,115],"byte_start":82026,"byte_end":82040,"line_start":538,"line_end":538,"column_start":36,"column_end":50},"kind":{"variant":"Impl","fields":[47]},"from":{"krate":0,"index":1268},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":83396,"byte_end":83405,"line_start":46,"line_end":46,"column_start":15,"column_end":24},"kind":{"variant":"Impl","fields":[48]},"from":{"krate":0,"index":1274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":83861,"byte_end":83870,"line_start":59,"line_end":59,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[49]},"from":{"krate":0,"index":1274},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":84467,"byte_end":84476,"line_start":79,"line_end":79,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[50]},"from":{"krate":0,"index":1274},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":84616,"byte_end":84625,"line_start":85,"line_end":85,"column_start":33,"column_end":42},"kind":{"variant":"Impl","fields":[51]},"from":{"krate":0,"index":1274},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":85914,"byte_end":85923,"line_start":134,"line_end":134,"column_start":15,"column_end":24},"kind":{"variant":"Impl","fields":[52]},"from":{"krate":0,"index":1280},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86176,"byte_end":86185,"line_start":144,"line_end":144,"column_start":9,"column_end":18},"kind":{"variant":"Impl","fields":[53]},"from":{"krate":0,"index":1280},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":86940,"byte_end":86949,"line_start":169,"line_end":169,"column_start":24,"column_end":33},"kind":{"variant":"Impl","fields":[54]},"from":{"krate":0,"index":1280},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":87089,"byte_end":87098,"line_start":175,"line_end":175,"column_start":33,"column_end":42},"kind":{"variant":"Impl","fields":[55]},"from":{"krate":0,"index":1280},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":88899,"byte_end":88913,"line_start":230,"line_end":230,"column_start":15,"column_end":29},"kind":{"variant":"Impl","fields":[56]},"from":{"krate":0,"index":1286},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":89263,"byte_end":89277,"line_start":241,"line_end":241,"column_start":9,"column_end":23},"kind":{"variant":"Impl","fields":[57]},"from":{"krate":0,"index":1286},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":90038,"byte_end":90052,"line_start":266,"line_end":266,"column_start":24,"column_end":38},"kind":{"variant":"Impl","fields":[58]},"from":{"krate":0,"index":1286},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,114,101,97,100,46,114,115],"byte_start":90192,"byte_end":90206,"line_start":272,"line_end":272,"column_start":33,"column_end":47},"kind":{"variant":"Impl","fields":[59]},"from":{"krate":0,"index":1286},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":91654,"byte_end":91663,"line_start":53,"line_end":53,"column_start":16,"column_end":25},"kind":{"variant":"Impl","fields":[60]},"from":{"krate":0,"index":1292},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":94888,"byte_end":94897,"line_start":143,"line_end":143,"column_start":26,"column_end":35},"kind":{"variant":"Impl","fields":[61]},"from":{"krate":0,"index":1292},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":95546,"byte_end":95555,"line_start":167,"line_end":167,"column_start":32,"column_end":41},"kind":{"variant":"Impl","fields":[62]},"from":{"krate":0,"index":1292},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,119,114,105,116,101,46,114,115],"byte_start":95778,"byte_end":95787,"line_start":176,"line_end":176,"column_start":25,"column_end":34},"kind":{"variant":"Impl","fields":[63]},"from":{"krate":0,"index":1292},"to":{"krate":2,"index":1996}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":55566,"byte_end":55574,"line_start":31,"line_end":31,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[64]},"from":{"krate":0,"index":1298},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,103,122,47,109,111,100,46,114,115],"byte_start":58591,"byte_end":58600,"line_start":121,"line_end":121,"column_start":6,"column_end":15},"kind":{"variant":"Impl","fields":[65]},"from":{"krate":0,"index":1314},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,105,111,46,114,115],"byte_start":96538,"byte_end":96546,"line_start":24,"line_end":24,"column_start":14,"column_end":22},"kind":{"variant":"Impl","fields":[66]},"from":{"krate":0,"index":1326},"to":{"krate":0,"index":740}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,105,111,46,114,115],"byte_start":97090,"byte_end":97100,"line_start":38,"line_end":38,"column_start":14,"column_end":24},"kind":{"variant":"Impl","fields":[67]},"from":{"krate":0,"index":1332},"to":{"krate":0,"index":740}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,105,111,46,114,115],"byte_start":97722,"byte_end":97735,"line_start":58,"line_end":58,"column_start":16,"column_end":29},"kind":{"variant":"Impl","fields":[68]},"from":{"krate":0,"index":1356},"to":{"krate":0,"index":776}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,105,111,46,114,115],"byte_start":97936,"byte_end":97951,"line_start":72,"line_end":72,"column_start":16,"column_end":31},"kind":{"variant":"Impl","fields":[69]},"from":{"krate":0,"index":1376},"to":{"krate":0,"index":776}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,105,111,46,114,115],"byte_start":99573,"byte_end":99579,"line_start":127,"line_end":127,"column_start":24,"column_end":30},"kind":{"variant":"Impl","fields":[70]},"from":{"krate":0,"index":1320},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,105,111,46,114,115],"byte_start":101144,"byte_end":101150,"line_start":187,"line_end":187,"column_start":34,"column_end":40},"kind":{"variant":"Impl","fields":[71]},"from":{"krate":0,"index":1320},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,105,111,46,114,115],"byte_start":103181,"byte_end":103187,"line_start":237,"line_end":237,"column_start":33,"column_end":39},"kind":{"variant":"Impl","fields":[72]},"from":{"krate":0,"index":1320},"to":{"krate":2,"index":1996}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":104955,"byte_end":104961,"line_start":54,"line_end":54,"column_start":36,"column_end":42},"kind":{"variant":"Impl","fields":[73]},"from":{"krate":0,"index":1338},"to":{"krate":2,"index":1728}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":105003,"byte_end":105009,"line_start":55,"line_end":55,"column_start":36,"column_end":42},"kind":{"variant":"Impl","fields":[74]},"from":{"krate":0,"index":1338},"to":{"krate":2,"index":1740}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":109867,"byte_end":109875,"line_start":178,"line_end":178,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[75]},"from":{"krate":0,"index":1326},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":114766,"byte_end":114776,"line_start":297,"line_end":297,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[76]},"from":{"krate":0,"index":1332},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":120957,"byte_end":120972,"line_start":453,"line_end":453,"column_start":16,"column_end":31},"kind":{"variant":"Impl","fields":[77]},"from":{"krate":0,"index":1396},"to":{"krate":1,"index":2396}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121081,"byte_end":121086,"line_start":457,"line_end":457,"column_start":36,"column_end":41},"kind":{"variant":"Impl","fields":[78]},"from":{"krate":1,"index":3742},"to":{"krate":2,"index":2616}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121221,"byte_end":121236,"line_start":463,"line_end":463,"column_start":23,"column_end":38},"kind":{"variant":"Impl","fields":[79]},"from":{"krate":0,"index":1396},"to":{"krate":2,"index":7702}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121356,"byte_end":121369,"line_start":469,"line_end":469,"column_start":16,"column_end":29},"kind":{"variant":"Impl","fields":[80]},"from":{"krate":0,"index":1402},"to":{"krate":1,"index":2396}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121474,"byte_end":121479,"line_start":473,"line_end":473,"column_start":34,"column_end":39},"kind":{"variant":"Impl","fields":[81]},"from":{"krate":1,"index":3742},"to":{"krate":2,"index":2616}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121612,"byte_end":121625,"line_start":479,"line_end":479,"column_start":23,"column_end":36},"kind":{"variant":"Impl","fields":[82]},"from":{"krate":0,"index":1402},"to":{"krate":2,"index":7702}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121749,"byte_end":121760,"line_start":485,"line_end":485,"column_start":20,"column_end":31},"kind":{"variant":"Impl","fields":[83]},"from":{"krate":0,"index":1344},"to":{"krate":0,"index":856}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":121887,"byte_end":121900,"line_start":490,"line_end":490,"column_start":20,"column_end":33},"kind":{"variant":"Impl","fields":[84]},"from":{"krate":0,"index":1350},"to":{"krate":0,"index":856}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,109,101,109,46,114,115],"byte_start":122037,"byte_end":122043,"line_start":496,"line_end":496,"column_start":29,"column_end":35},"kind":{"variant":"Impl","fields":[85]},"from":{"krate":0,"index":1338},"to":{"krate":2,"index":1996}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":130800,"byte_end":130811,"line_start":47,"line_end":47,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[86]},"from":{"krate":0,"index":1428},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":131204,"byte_end":131215,"line_start":62,"line_end":62,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[87]},"from":{"krate":0,"index":1428},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":132780,"byte_end":132791,"line_start":110,"line_end":110,"column_start":27,"column_end":38},"kind":{"variant":"Impl","fields":[88]},"from":{"krate":0,"index":1428},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":133045,"byte_end":133056,"line_start":119,"line_end":119,"column_start":36,"column_end":47},"kind":{"variant":"Impl","fields":[89]},"from":{"krate":0,"index":1428},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":134557,"byte_end":134568,"line_start":175,"line_end":175,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[90]},"from":{"krate":0,"index":1434},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":134918,"byte_end":134929,"line_start":190,"line_end":190,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[91]},"from":{"krate":0,"index":1434},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":136387,"byte_end":136398,"line_start":235,"line_end":235,"column_start":27,"column_end":38},"kind":{"variant":"Impl","fields":[92]},"from":{"krate":0,"index":1434},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,98,117,102,114,101,97,100,46,114,115],"byte_start":136654,"byte_end":136665,"line_start":244,"line_end":244,"column_start":36,"column_end":47},"kind":{"variant":"Impl","fields":[93]},"from":{"krate":0,"index":1434},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":138126,"byte_end":138137,"line_start":42,"line_end":42,"column_start":15,"column_end":26},"kind":{"variant":"Impl","fields":[94]},"from":{"krate":0,"index":1440},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":138453,"byte_end":138464,"line_start":52,"line_end":52,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[95]},"from":{"krate":0,"index":1440},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":140466,"byte_end":140477,"line_start":107,"line_end":107,"column_start":24,"column_end":35},"kind":{"variant":"Impl","fields":[96]},"from":{"krate":0,"index":1440},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":140693,"byte_end":140704,"line_start":116,"line_end":116,"column_start":33,"column_end":44},"kind":{"variant":"Impl","fields":[97]},"from":{"krate":0,"index":1440},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":142197,"byte_end":142208,"line_start":172,"line_end":172,"column_start":15,"column_end":26},"kind":{"variant":"Impl","fields":[98]},"from":{"krate":0,"index":1446},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":142825,"byte_end":142836,"line_start":190,"line_end":190,"column_start":9,"column_end":20},"kind":{"variant":"Impl","fields":[99]},"from":{"krate":0,"index":1446},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":144731,"byte_end":144742,"line_start":242,"line_end":242,"column_start":24,"column_end":35},"kind":{"variant":"Impl","fields":[100]},"from":{"krate":0,"index":1446},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,114,101,97,100,46,114,115],"byte_start":144960,"byte_end":144971,"line_start":251,"line_end":251,"column_start":33,"column_end":44},"kind":{"variant":"Impl","fields":[101]},"from":{"krate":0,"index":1446},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":146325,"byte_end":146336,"line_start":41,"line_end":41,"column_start":16,"column_end":27},"kind":{"variant":"Impl","fields":[102]},"from":{"krate":0,"index":1452},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":150916,"byte_end":150927,"line_start":160,"line_end":160,"column_start":26,"column_end":37},"kind":{"variant":"Impl","fields":[103]},"from":{"krate":0,"index":1452},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":151349,"byte_end":151360,"line_start":178,"line_end":178,"column_start":32,"column_end":43},"kind":{"variant":"Impl","fields":[104]},"from":{"krate":0,"index":1452},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":152790,"byte_end":152801,"line_start":229,"line_end":229,"column_start":16,"column_end":27},"kind":{"variant":"Impl","fields":[105]},"from":{"krate":0,"index":1458},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":156366,"byte_end":156377,"line_start":326,"line_end":326,"column_start":26,"column_end":37},"kind":{"variant":"Impl","fields":[106]},"from":{"krate":0,"index":1458},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,122,108,105,98,47,119,114,105,116,101,46,114,115],"byte_start":156807,"byte_end":156818,"line_start":344,"line_end":344,"column_start":32,"column_end":43},"kind":{"variant":"Impl","fields":[107]},"from":{"krate":0,"index":1458},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5807,"byte_end":5818,"line_start":167,"line_end":167,"column_start":6,"column_end":17},"kind":{"variant":"Impl","fields":[108]},"from":{"krate":0,"index":1464},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,102,108,97,116,101,50,45,49,46,48,46,49,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6725,"byte_end":6736,"line_start":200,"line_end":200,"column_start":18,"column_end":29},"kind":{"variant":"Impl","fields":[109]},"from":{"krate":0,"index":1464},"to":{"krate":2,"index":2596}}]}