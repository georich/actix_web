{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"slab","disambiguator":[1099382465232922427,4147351552908711642]},"crate_root":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.0/src","external_crates":[{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.0/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[1877579056841321839,4002650866653523028]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[12966739244720591078,10895073499070158948]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4148811982382486632,5293825926111630395]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.0/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[55294194006836696,257979567559498938]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.0/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[5663549295587754337,15298730489275369687]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.0/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[198562575503244264,15640276364166720962]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.0/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15019360886040341153,15954958735131723916]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.0/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[2748248400471175825,13783408877556183619]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.0/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[13472166887002568360,10424338574949869411]}}],"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":24962,"line_start":1,"line_end":906,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":24962,"line_start":1,"line_end":906,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/slab-0.4.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":122},{"krate":0,"index":124},{"krate":0,"index":128},{"krate":0,"index":130},{"krate":0,"index":18},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":20},{"krate":0,"index":64},{"krate":0,"index":70},{"krate":0,"index":74},{"krate":0,"index":82},{"krate":0,"index":90},{"krate":0,"index":94},{"krate":0,"index":98},{"krate":0,"index":104},{"krate":0,"index":110}],"decl_id":null,"docs":" Pre-allocated storage for a uniform data type.","sig":null,"attributes":[{"value":"deny(warnings, missing_docs, missing_debug_implementations)","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3584,"byte_end":3647,"line_start":101,"line_end":101,"column_start":1,"column_end":64}},{"value":"crate_name = \"slab\"","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3700,"byte_end":3723,"line_start":103,"line_end":103,"column_start":1,"column_end":24}}]},{"kind":"Struct","id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3994,"byte_end":3998,"line_start":116,"line_end":116,"column_start":12,"column_end":16},"name":"Slab","qualname":"::Slab","value":"Slab {  }","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":69},{"krate":0,"index":71}],"decl_id":null,"docs":" Pre-allocated storage for a uniform data type","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":122},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4756,"byte_end":4767,"line_start":151,"line_end":151,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":81}],"decl_id":null,"docs":" A handle to an vacant entry in a `Slab`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":128},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4908,"byte_end":4912,"line_start":158,"line_end":158,"column_start":12,"column_end":16},"name":"Iter","qualname":"::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":91},{"krate":0,"index":93}],"decl_id":null,"docs":" An iterator over the values stored in the `Slab`\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":18},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5040,"byte_end":5047,"line_start":164,"line_end":164,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":23},{"krate":0,"index":25},{"krate":0,"index":27}],"decl_id":null,"docs":" A mutable iterator over the values stored in the `Slab`\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":22},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5568,"byte_end":5571,"line_start":188,"line_end":188,"column_start":12,"column_end":15},"name":"new","qualname":"<Slab<T>>::new","value":"fn () -> Slab<T>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new, empty `Slab`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":24},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6611,"byte_end":6624,"line_start":219,"line_end":219,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<Slab<T>>::with_capacity","value":"fn (capacity: usize) -> Slab<T>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new, empty `Slab` with the specified capacity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":7046,"byte_end":7054,"line_start":236,"line_end":236,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Slab<T>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of values the slab can store without reallocating.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":8100,"byte_end":8107,"line_start":266,"line_end":266,"column_start":12,"column_end":19},"name":"reserve","qualname":"<Slab<T>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more values to be stored\n without allocating.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":9326,"byte_end":9339,"line_start":302,"line_end":302,"column_start":12,"column_end":25},"name":"reserve_exact","qualname":"<Slab<T>>::reserve_exact","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves the minimum capacity required to store exactly `additional`\n more values.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":10684,"byte_end":10697,"line_start":352,"line_end":352,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<Slab<T>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the slab as much as possible.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11056,"byte_end":11061,"line_start":371,"line_end":371,"column_start":12,"column_end":17},"name":"clear","qualname":"<Slab<T>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clear the slab of all values","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11443,"byte_end":11446,"line_start":391,"line_end":391,"column_start":12,"column_end":15},"name":"len","qualname":"<Slab<T>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of stored values","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":11778,"byte_end":11786,"line_start":407,"line_end":407,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Slab<T>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if no values are stored in the slab","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":12622,"byte_end":12626,"line_start":435,"line_end":435,"column_start":12,"column_end":16},"name":"iter","qualname":"<Slab<T>>::iter","value":"fn (&self) -> Iter<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the slab","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":13496,"byte_end":13504,"line_start":467,"line_end":467,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Slab<T>>::iter_mut","value":"fn (&mut self) -> IterMut<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14100,"byte_end":14103,"line_start":490,"line_end":490,"column_start":12,"column_end":15},"name":"get","qualname":"<Slab<T>>::get","value":"fn (&self, key: usize) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value associated with the given key","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14769,"byte_end":14776,"line_start":514,"line_end":514,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<Slab<T>>::get_mut","value":"fn (&mut self, key: usize) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value associated with the given key","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":15397,"byte_end":15410,"line_start":537,"line_end":537,"column_start":19,"column_end":32},"name":"get_unchecked","qualname":"<Slab<T>>::get_unchecked","value":"fn (&self, key: usize) -> &T","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value associated with the given key without\n performing bounds checking.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16083,"byte_end":16100,"line_start":563,"line_end":563,"column_start":19,"column_end":36},"name":"get_unchecked_mut","qualname":"<Slab<T>>::get_unchecked_mut","value":"fn (&mut self, key: usize) -> &mut T","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value associated with the given key\n without performing bounds checking.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":16927,"byte_end":16933,"line_start":588,"line_end":588,"column_start":12,"column_end":18},"name":"insert","qualname":"<Slab<T>>::insert","value":"fn (&mut self, val: T) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Insert a value in the slab, returning key assigned to the value","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":17744,"byte_end":17756,"line_start":619,"line_end":619,"column_start":12,"column_end":24},"name":"vacant_entry","qualname":"<Slab<T>>::vacant_entry","value":"fn (&mut self) -> VacantEntry<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a handle to a vacant entry allowing for further manipulation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":18934,"byte_end":18940,"line_start":666,"line_end":666,"column_start":12,"column_end":18},"name":"remove","qualname":"<Slab<T>>::remove","value":"fn (&mut self, key: usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value associated with the given key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":19860,"byte_end":19868,"line_start":701,"line_end":701,"column_start":12,"column_end":20},"name":"contains","qualname":"<Slab<T>>::contains","value":"fn (&self, key: usize) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if a value is associated with the given key.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":20854,"byte_end":20860,"line_start":736,"line_end":736,"column_start":12,"column_end":18},"name":"retain","qualname":"<Slab<T>>::retain","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retain only the elements specified by the predicate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":23241,"byte_end":23247,"line_start":833,"line_end":833,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry<'a, T>>::insert","value":"fn (self, val: T) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":" Insert a value in the entry, returning a mutable reference to the value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24001,"byte_end":24004,"line_start":863,"line_end":863,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry<'a, T>>::key","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the key associated with this entry.","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5223,"byte_end":5227,"line_start":176,"line_end":176,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":62}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21241,"byte_end":21245,"line_start":752,"line_end":752,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":66},{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21480,"byte_end":21484,"line_start":763,"line_end":763,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":72}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22077,"byte_end":22081,"line_start":790,"line_end":790,"column_start":24,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":92}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22331,"byte_end":22338,"line_start":799,"line_end":799,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":96}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22626,"byte_end":22637,"line_start":810,"line_end":810,"column_start":13,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":100},{"krate":0,"index":102}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24095,"byte_end":24099,"line_start":870,"line_end":870,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":108}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24514,"byte_end":24521,"line_start":889,"line_end":889,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5223,"byte_end":5227,"line_start":176,"line_end":176,"column_start":9,"column_end":13},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":116},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21241,"byte_end":21245,"line_start":752,"line_end":752,"column_start":31,"column_end":35},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":116},"to":{"krate":2,"index":2062}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":21480,"byte_end":21484,"line_start":763,"line_end":763,"column_start":34,"column_end":38},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":116},"to":{"krate":2,"index":2068}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22077,"byte_end":22081,"line_start":790,"line_end":790,"column_start":24,"column_end":28},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":116},"to":{"krate":2,"index":7698}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22331,"byte_end":22338,"line_start":799,"line_end":799,"column_start":32,"column_end":39},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":18},"to":{"krate":2,"index":7698}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":22626,"byte_end":22637,"line_start":810,"line_end":810,"column_start":13,"column_end":24},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":122},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24095,"byte_end":24099,"line_start":870,"line_end":870,"column_start":26,"column_end":30},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":128},"to":{"krate":2,"index":3802}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,115,108,97,98,45,48,46,52,46,48,47,115,114,99,47,108,105,98,46,114,115],"byte_start":24514,"byte_end":24521,"line_start":889,"line_end":889,"column_start":26,"column_end":33},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":18},"to":{"krate":2,"index":3802}}]}