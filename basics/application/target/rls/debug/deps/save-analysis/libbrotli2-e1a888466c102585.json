{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"brotli2","disambiguator":[1443238034775437208,8836888576798133644]},"crate_root":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src","external_crates":[{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[1877579056841321839,4002650866653523028]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[12966739244720591078,10895073499070158948]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[4148811982382486632,5293825926111630395]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[55294194006836696,257979567559498938]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[5663549295587754337,15298730489275369687]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[198562575503244264,15640276364166720962]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15019360886040341153,15954958735131723916]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[2748248400471175825,13783408877556183619]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[13472166887002568360,10424338574949869411]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":10,"id":{"name":"brotli_sys","disambiguator":[1445113612995409438,7037136915560046132]}},{"file_name":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","num":11,"id":{"name":"libc","disambiguator":[6776164903394557340,5187685817441892726]}}],"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":3990,"line_start":1,"line_end":133,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":0,"byte_end":3990,"line_start":1,"line_end":133,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":86},{"krate":0,"index":144},{"krate":0,"index":192},{"krate":0,"index":382},{"krate":0,"index":400},{"krate":0,"index":396},{"krate":0,"index":392},{"krate":0,"index":388},{"krate":0,"index":384},{"krate":0,"index":402},{"krate":0,"index":408},{"krate":0,"index":404},{"krate":0,"index":270}],"decl_id":null,"docs":" Brotli Compression/Decompression for Rust","sig":null,"attributes":[{"value":"deny(missing_docs)","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":784,"byte_end":806,"line_start":25,"line_end":25,"column_start":1,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":10},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"raw","qualname":"::raw","value":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/raw.rs","parent":null,"children":[{"krate":0,"index":12},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":18},{"krate":0,"index":20},{"krate":0,"index":22},{"krate":0,"index":24},{"krate":0,"index":26},{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":290},{"krate":0,"index":308},{"krate":0,"index":304},{"krate":0,"index":300},{"krate":0,"index":296},{"krate":0,"index":292},{"krate":0,"index":310},{"krate":0,"index":322},{"krate":0,"index":318},{"krate":0,"index":312},{"krate":0,"index":326},{"krate":0,"index":342},{"krate":0,"index":338},{"krate":0,"index":336},{"krate":0,"index":332},{"krate":0,"index":328},{"krate":0,"index":346},{"krate":0,"index":362},{"krate":0,"index":358},{"krate":0,"index":356},{"krate":0,"index":352},{"krate":0,"index":348},{"krate":0,"index":42},{"krate":0,"index":52},{"krate":0,"index":56},{"krate":0,"index":58},{"krate":0,"index":68},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":78},{"krate":0,"index":82}],"decl_id":null,"docs":" Raw interface to in-memory compression/decompression streams\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":30},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":4390,"byte_end":4400,"line_start":19,"line_end":19,"column_start":12,"column_end":22},"name":"Decompress","qualname":"::raw::Decompress","value":"Decompress {  }","parent":null,"children":[{"krate":0,"index":19}],"decl_id":null,"docs":" In-memory state for decompressing brotli-encoded data.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":36},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":4688,"byte_end":4696,"line_start":30,"line_end":30,"column_start":12,"column_end":20},"name":"Compress","qualname":"::raw::Compress","value":"Compress {  }","parent":null,"children":[{"krate":0,"index":21}],"decl_id":null,"docs":" In-memory state for compressing/encoding data with brotli","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":103},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":5260,"byte_end":5267,"line_start":47,"line_end":47,"column_start":5,"column_end":12},"name":"Process","qualname":"::raw::CompressOp::Process","value":"CompressOp::Process","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Compress input data\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":107},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":5410,"byte_end":5415,"line_start":50,"line_end":50,"column_start":5,"column_end":10},"name":"Flush","qualname":"::raw::CompressOp::Flush","value":"CompressOp::Flush","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Compress input data, ensuring that all input so far has been\n written out\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":111},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":5626,"byte_end":5632,"line_start":54,"line_end":54,"column_start":5,"column_end":11},"name":"Finish","qualname":"::raw::CompressOp::Finish","value":"CompressOp::Finish","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Compress input data, ensuring that all input so far has been\n written out and then finalizing the stream so no more data can\n be written\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":115},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":5883,"byte_end":5895,"line_start":58,"line_end":58,"column_start":5,"column_end":17},"name":"EmitMetadata","qualname":"::raw::CompressOp::EmitMetadata","value":"CompressOp::EmitMetadata","parent":{"krate":0,"index":290},"children":[],"decl_id":null,"docs":" Emit a metadata block to the stream, an opaque piece of out-of-band\n data that does not interfere with the main stream of data. Metadata\n blocks *must* be no longer than 16MiB\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":290},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":5215,"byte_end":5225,"line_start":45,"line_end":45,"column_start":10,"column_end":20},"name":"CompressOp","qualname":"::raw::CompressOp","value":"CompressOp::{Process, Flush, Finish, EmitMetadata}","parent":null,"children":[{"krate":0,"index":103},{"krate":0,"index":107},{"krate":0,"index":111},{"krate":0,"index":115}],"decl_id":null,"docs":" Possible choices for the operation performed by the compressor.","sig":null,"attributes":[{"value":"repr(isize)","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":5150,"byte_end":5164,"line_start":43,"line_end":43,"column_start":1,"column_end":15}},{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":5206,"byte_end":5952,"line_start":45,"line_end":59,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":5206,"byte_end":5952,"line_start":45,"line_end":59,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":310},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":6077,"byte_end":6082,"line_start":63,"line_end":63,"column_start":12,"column_end":17},"name":"Error","qualname":"::raw::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" Error that can happen from decompressing or compressing a brotli stream.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":123},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":6376,"byte_end":6384,"line_start":71,"line_end":71,"column_start":5,"column_end":13},"name":"Finished","qualname":"::raw::CoStatus::Finished","value":"CoStatus::Finished","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" The operation completed successfully\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":125},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":6490,"byte_end":6500,"line_start":74,"line_end":74,"column_start":5,"column_end":15},"name":"Unfinished","qualname":"::raw::CoStatus::Unfinished","value":"CoStatus::Unfinished","parent":{"krate":0,"index":326},"children":[],"decl_id":null,"docs":" The operation has more work to do and needs to be called again with the\n same buffer\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":326},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":6316,"byte_end":6324,"line_start":69,"line_end":69,"column_start":10,"column_end":18},"name":"CoStatus","qualname":"::raw::CoStatus","value":"CoStatus::{Finished, Unfinished}","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":125}],"decl_id":null,"docs":" Indication of whether a compression operation is 'complete'. This does\n not indicate whether the whole stream is complete - see `Compress::compress`\n for details.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":6307,"byte_end":6503,"line_start":69,"line_end":75,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":6307,"byte_end":6503,"line_start":69,"line_end":75,"column_start":1,"column_end":2}}]},{"kind":"TupleVariant","id":{"krate":0,"index":127},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":6685,"byte_end":6693,"line_start":81,"line_end":81,"column_start":5,"column_end":13},"name":"Finished","qualname":"::raw::DeStatus::Finished","value":"DeStatus::Finished","parent":{"krate":0,"index":346},"children":[],"decl_id":null,"docs":" Decompression was successful and has finished\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":129},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":6740,"byte_end":6749,"line_start":83,"line_end":83,"column_start":5,"column_end":14},"name":"NeedInput","qualname":"::raw::DeStatus::NeedInput","value":"DeStatus::NeedInput","parent":{"krate":0,"index":346},"children":[],"decl_id":null,"docs":" More input is needed to continue\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":131},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":6797,"byte_end":6807,"line_start":85,"line_end":85,"column_start":5,"column_end":15},"name":"NeedOutput","qualname":"::raw::DeStatus::NeedOutput","value":"DeStatus::NeedOutput","parent":{"krate":0,"index":346},"children":[],"decl_id":null,"docs":" More output is needed to continue\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":346},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":6616,"byte_end":6624,"line_start":79,"line_end":79,"column_start":10,"column_end":18},"name":"DeStatus","qualname":"::raw::DeStatus","value":"DeStatus::{Finished, NeedInput, NeedOutput}","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":129},{"krate":0,"index":131}],"decl_id":null,"docs":" Possible status results returned from decompressing.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":6607,"byte_end":6810,"line_start":79,"line_end":86,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":6607,"byte_end":6810,"line_start":79,"line_end":86,"column_start":1,"column_end":2}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":6931,"byte_end":6934,"line_start":91,"line_end":91,"column_start":12,"column_end":15},"name":"new","qualname":"<Decompress>::new","value":"fn () -> Decompress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new brotli decompression/decoding stream ready to receive\n data.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":7868,"byte_end":7878,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"decompress","qualname":"<Decompress>::decompress","value":"fn (&mut self, input: &mut &[u8], output: &mut &mut [u8]) -> Result<DeStatus, Error>","parent":null,"children":[],"decl_id":null,"docs":" Decompress some input data and write it to a buffer of output data.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":9140,"byte_end":9151,"line_start":139,"line_end":139,"column_start":12,"column_end":23},"name":"take_output","qualname":"<Decompress>::take_output","value":"fn (&mut self, size_limit: Option<usize>) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve a slice of the internal decompressor buffer up to `size_limit` in length\n (unlimited length if `None`), consuming it. As the internal buffer may not be\n contiguous, consecutive calls may return more output until this function returns\n `None`.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":56},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":10764,"byte_end":10778,"line_start":180,"line_end":180,"column_start":8,"column_end":22},"name":"decompress_buf","qualname":"::raw::decompress_buf","value":"fn (input: &[u8], output: &mut &mut [u8]) -> Result<usize, Error>","parent":null,"children":[],"decl_id":null,"docs":" Decompress data in one go in memory.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":11392,"byte_end":11395,"line_start":199,"line_end":199,"column_start":12,"column_end":15},"name":"new","qualname":"<Compress>::new","value":"fn () -> Compress","parent":null,"children":[],"decl_id":null,"docs":" Creates a new compressor ready to encode data into brotli\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":14503,"byte_end":14511,"line_start":275,"line_end":275,"column_start":12,"column_end":20},"name":"compress","qualname":"<Compress>::compress","value":"fn (&mut self, op: CompressOp, input: &mut &[u8], output: &mut &mut [u8]) -> Result<CoStatus, Error>","parent":null,"children":[],"decl_id":null,"docs":" Pass some input data to the compressor and write it to a buffer of\n output data, compressing or otherwise handling it as instructed by\n the specified operation.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":16387,"byte_end":16398,"line_start":314,"line_end":314,"column_start":12,"column_end":23},"name":"take_output","qualname":"<Compress>::take_output","value":"fn (&mut self, size_limit: Option<usize>) -> Option<&[u8]>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve a slice of the internal compressor buffer up to `size_limit` in length\n (unlimited length if `None`), consuming it. As the internal buffer may not be\n contiguous, consecutive calls may return more output until this function returns\n `None`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":17108,"byte_end":17118,"line_start":332,"line_end":332,"column_start":12,"column_end":22},"name":"set_params","qualname":"<Compress>::set_params","value":"fn (&mut self, params: &CompressParams) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Configure the parameters of this compression session.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":72},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":19051,"byte_end":19063,"line_start":373,"line_end":373,"column_start":8,"column_end":20},"name":"compress_buf","qualname":"::raw::compress_buf","value":"fn (params: &CompressParams, input: &[u8], output: &mut &mut [u8]) -> Result<usize, Error>","parent":null,"children":[],"decl_id":null,"docs":" Compresses the data in `input` into `output`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":86},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bufread","qualname":"::bufread","value":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/bufread.rs","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":366},{"krate":0,"index":378},{"krate":0,"index":376},{"krate":0,"index":372},{"krate":0,"index":368},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":124},{"krate":0,"index":130},{"krate":0,"index":140}],"decl_id":null,"docs":" I/O streams for wrapping `BufRead` types as encoders/decoders\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":108},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":22977,"byte_end":22990,"line_start":20,"line_end":20,"column_start":12,"column_end":25},"name":"BrotliEncoder","qualname":"::bufread::BrotliEncoder","value":"BrotliEncoder {  }","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":27},{"krate":0,"index":29},{"krate":0,"index":31}],"decl_id":null,"docs":" A brotli encoder, or compressor.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":110},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":23297,"byte_end":23310,"line_start":31,"line_end":31,"column_start":12,"column_end":25},"name":"BrotliDecoder","qualname":"::bufread::BrotliDecoder","value":"BrotliDecoder {  }","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":37},{"krate":0,"index":39}],"decl_id":null,"docs":" A brotli decoder, or decompressor.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":23625,"byte_end":23628,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<BrotliEncoder<R>>::new","value":"fn (r: R, level: u32) -> BrotliEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder which will read uncompressed data from the given\n stream and emit the compressed stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":23995,"byte_end":24006,"line_start":54,"line_end":54,"column_start":12,"column_end":23},"name":"from_params","qualname":"<BrotliEncoder<R>>::from_params","value":"fn (r: R, params: &CompressParams) -> BrotliEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder with a custom `CompressParams`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24348,"byte_end":24355,"line_start":66,"line_end":66,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BrotliEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24600,"byte_end":24607,"line_start":74,"line_end":74,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BrotliEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24735,"byte_end":24745,"line_start":79,"line_end":79,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<BrotliEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27442,"byte_end":27445,"line_start":158,"line_end":158,"column_start":12,"column_end":15},"name":"new","qualname":"<BrotliDecoder<R>>::new","value":"fn (r: R) -> BrotliDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder which will decompress data read from the given\n stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27660,"byte_end":27667,"line_start":167,"line_end":167,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BrotliDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27912,"byte_end":27919,"line_start":175,"line_end":175,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BrotliDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":28047,"byte_end":28057,"line_start":180,"line_end":180,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<BrotliDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Consumes this decoder, returning the underlying reader.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":144},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::read","value":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/read.rs","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":148},{"krate":0,"index":154},{"krate":0,"index":156},{"krate":0,"index":158},{"krate":0,"index":160},{"krate":0,"index":162},{"krate":0,"index":174},{"krate":0,"index":178},{"krate":0,"index":188}],"decl_id":null,"docs":" Reader-based compression/decompression streams\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":158},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":29941,"byte_end":29954,"line_start":12,"line_end":12,"column_start":12,"column_end":25},"name":"BrotliEncoder","qualname":"::read::BrotliEncoder","value":"BrotliEncoder {  }","parent":null,"children":[{"krate":0,"index":53}],"decl_id":null,"docs":" A compression stream which wraps an uncompressed stream of data. Compressed\n data will be read from the stream.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":160},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":30149,"byte_end":30162,"line_start":18,"line_end":18,"column_start":12,"column_end":25},"name":"BrotliDecoder","qualname":"::read::BrotliDecoder","value":"BrotliDecoder {  }","parent":null,"children":[{"krate":0,"index":57}],"decl_id":null,"docs":" A decompression stream which wraps a compressed stream of data. Decompressed\n data will be read from the stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":30496,"byte_end":30499,"line_start":27,"line_end":27,"column_start":12,"column_end":15},"name":"new","qualname":"<BrotliEncoder<R>>::new","value":"fn (r: R, level: u32) -> BrotliEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new compression stream which will compress at the given level\n to read compress output to the give output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":30728,"byte_end":30739,"line_start":34,"line_end":34,"column_start":12,"column_end":23},"name":"from_params","qualname":"<BrotliEncoder<R>>::from_params","value":"fn (r: R, params: &CompressParams) -> BrotliEncoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Configure the compression parameters of this encoder.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":31036,"byte_end":31043,"line_start":42,"line_end":42,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BrotliEncoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":31309,"byte_end":31316,"line_start":50,"line_end":50,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BrotliEncoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":172},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":31469,"byte_end":31479,"line_start":55,"line_end":55,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<BrotliEncoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the underlying writer, finishing the compression stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":31863,"byte_end":31866,"line_start":69,"line_end":69,"column_start":12,"column_end":15},"name":"new","qualname":"<BrotliDecoder<R>>::new","value":"fn (r: R) -> BrotliDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decompression stream, which will read compressed\n data from the given input stream and decompress it.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":32068,"byte_end":32075,"line_start":76,"line_end":76,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BrotliDecoder<R>>::get_ref","value":"fn (&self) -> &R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying stream\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":32341,"byte_end":32348,"line_start":84,"line_end":84,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BrotliDecoder<R>>::get_mut","value":"fn (&mut self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying stream","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":32501,"byte_end":32511,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<BrotliDecoder<R>>::into_inner","value":"fn (self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the underlying writer, finishing the compression stream.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":192},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"write","qualname":"::write","value":"/home/george/.cargo/registry/src/github.com-1ecc6299db9ec823/brotli2-0.3.2/src/write.rs","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":220},{"krate":0,"index":236},{"krate":0,"index":242},{"krate":0,"index":246},{"krate":0,"index":260},{"krate":0,"index":266}],"decl_id":null,"docs":" Writer-based compression/decompression streams\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":216},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":35856,"byte_end":35869,"line_start":14,"line_end":14,"column_start":12,"column_end":25},"name":"BrotliEncoder","qualname":"::write::BrotliEncoder","value":"BrotliEncoder {  }","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":71},{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":77}],"decl_id":null,"docs":" A compression stream which will have uncompressed data written to it and\n will write compressed data to an output stream.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":218},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":36128,"byte_end":36141,"line_start":24,"line_end":24,"column_start":12,"column_end":25},"name":"BrotliDecoder","qualname":"::write::BrotliDecoder","value":"BrotliDecoder {  }","parent":null,"children":[{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":85},{"krate":0,"index":87},{"krate":0,"index":89}],"decl_id":null,"docs":" A compression stream which will have compressed data written to it and\n will write uncompressed data to an output stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":222},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":36446,"byte_end":36449,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<BrotliEncoder<W>>::new","value":"fn (obj: W, level: u32) -> BrotliEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new compression stream which will compress at the given level\n to write compress output to the give output stream.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":36851,"byte_end":36862,"line_start":48,"line_end":48,"column_start":12,"column_end":23},"name":"from_params","qualname":"<BrotliEncoder<W>>::from_params","value":"fn (obj: W, params: &CompressParams) -> BrotliEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new encoder with a custom `CompressParams`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":37240,"byte_end":37247,"line_start":61,"line_end":61,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BrotliEncoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":37530,"byte_end":37537,"line_start":69,"line_end":69,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BrotliEncoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":234},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":39638,"byte_end":39644,"line_start":129,"line_end":129,"column_start":12,"column_end":18},"name":"finish","qualname":"<BrotliEncoder<W>>::finish","value":"fn (mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Consumes this encoder, flushing the output stream.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":248},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":41045,"byte_end":41048,"line_start":171,"line_end":171,"column_start":12,"column_end":15},"name":"new","qualname":"<BrotliDecoder<W>>::new","value":"fn (obj: W) -> BrotliDecoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoding stream which will decode all input written to it\n into `obj`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":250},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":41341,"byte_end":41348,"line_start":182,"line_end":182,"column_start":12,"column_end":19},"name":"get_ref","qualname":"<BrotliDecoder<W>>::get_ref","value":"fn (&self) -> &W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a reference to the underlying writer.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":41631,"byte_end":41638,"line_start":190,"line_end":190,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<BrotliDecoder<W>>::get_mut","value":"fn (&mut self) -> &mut W","parent":null,"children":[],"decl_id":null,"docs":" Acquires a mutable reference to the underlying writer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":43638,"byte_end":43644,"line_start":246,"line_end":246,"column_start":12,"column_end":18},"name":"finish","qualname":"<BrotliDecoder<W>>::finish","value":"fn (&mut self) -> io::Result<W>","parent":null,"children":[],"decl_id":null,"docs":" Unwrap the underlying writer, finishing the compression stream.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":139},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1295,"byte_end":1302,"line_start":47,"line_end":47,"column_start":5,"column_end":12},"name":"Generic","qualname":"::CompressMode::Generic","value":"CompressMode::Generic","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" Default compression mode, the compressor does not know anything in\n advance about the properties of the input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":143},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1408,"byte_end":1412,"line_start":49,"line_end":49,"column_start":5,"column_end":9},"name":"Text","qualname":"::CompressMode::Text","value":"CompressMode::Text","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" Compression mode for utf-8 formatted text input.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":147},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1496,"byte_end":1500,"line_start":51,"line_end":51,"column_start":5,"column_end":9},"name":"Font","qualname":"::CompressMode::Font","value":"CompressMode::Font","parent":{"krate":0,"index":382},"children":[],"decl_id":null,"docs":" Compression mode in WOFF 2.0.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":382},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1150,"byte_end":1162,"line_start":44,"line_end":44,"column_start":10,"column_end":22},"name":"CompressMode","qualname":"::CompressMode","value":"CompressMode::{Generic, Text, Font}","parent":null,"children":[{"krate":0,"index":139},{"krate":0,"index":143},{"krate":0,"index":147}],"decl_id":null,"docs":" Possible choices for modes of compression\n","sig":null,"attributes":[{"value":"repr(isize)","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1085,"byte_end":1099,"line_start":42,"line_end":42,"column_start":1,"column_end":15}},{"value":"structural_match","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1141,"byte_end":1543,"line_start":44,"line_end":52,"column_start":1,"column_end":2}},{"value":"rustc_copy_clone_marker","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1141,"byte_end":1543,"line_start":44,"line_end":52,"column_start":1,"column_end":2}}]},{"kind":"Struct","id":{"krate":0,"index":402},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1634,"byte_end":1648,"line_start":56,"line_end":56,"column_start":12,"column_end":26},"name":"CompressParams","qualname":"::CompressParams","value":"CompressParams {  }","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":153},{"krate":0,"index":155},{"krate":0,"index":157}],"decl_id":null,"docs":" Parameters passed to various compression routines.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":272},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2208,"byte_end":2211,"line_start":71,"line_end":71,"column_start":12,"column_end":15},"name":"new","qualname":"<CompressParams>::new","value":"fn () -> CompressParams","parent":null,"children":[],"decl_id":null,"docs":" Creates a new default set of compression parameters.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":274},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2515,"byte_end":2519,"line_start":81,"line_end":81,"column_start":12,"column_end":16},"name":"mode","qualname":"<CompressParams>::mode","value":"fn (&mut self, mode: CompressMode) -> &mut CompressParams","parent":null,"children":[],"decl_id":null,"docs":" Set the mode of this compression.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2837,"byte_end":2844,"line_start":90,"line_end":90,"column_start":12,"column_end":19},"name":"quality","qualname":"<CompressParams>::quality","value":"fn (&mut self, quality: u32) -> &mut CompressParams","parent":null,"children":[],"decl_id":null,"docs":" Controls the compression-speed vs compression-density tradeoffs.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":278},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3069,"byte_end":3074,"line_start":98,"line_end":98,"column_start":12,"column_end":17},"name":"lgwin","qualname":"<CompressParams>::lgwin","value":"fn (&mut self, lgwin: u32) -> &mut CompressParams","parent":null,"children":[],"decl_id":null,"docs":" Sets the base 2 logarithm of the sliding window size.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3366,"byte_end":3373,"line_start":107,"line_end":107,"column_start":12,"column_end":19},"name":"lgblock","qualname":"<CompressParams>::lgblock","value":"fn (&mut self, lgblock: u32) -> &mut CompressParams","parent":null,"children":[],"decl_id":null,"docs":" Sets the base 2 logarithm of the maximum input block size.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":282},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3536,"byte_end":3556,"line_start":114,"line_end":114,"column_start":12,"column_end":32},"name":"get_lgblock_readable","qualname":"<CompressParams>::get_lgblock_readable","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the current block size\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3515,"byte_end":3524,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":284},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3674,"byte_end":3685,"line_start":120,"line_end":120,"column_start":12,"column_end":23},"name":"get_lgblock","qualname":"<CompressParams>::get_lgblock","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get the native lgblock size\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3653,"byte_end":3662,"line_start":119,"line_end":119,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3798,"byte_end":3816,"line_start":125,"line_end":125,"column_start":12,"column_end":30},"name":"get_lgwin_readable","qualname":"<CompressParams>::get_lgwin_readable","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the current window size\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3777,"byte_end":3786,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":288},"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3930,"byte_end":3939,"line_start":130,"line_end":130,"column_start":12,"column_end":21},"name":"get_lgwin","qualname":"<CompressParams>::get_lgwin","value":"fn (&self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Get the native lgwin value\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3909,"byte_end":3918,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":4475,"byte_end":4485,"line_start":23,"line_end":23,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":4510,"byte_end":4520,"line_start":24,"line_end":24,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":4771,"byte_end":4779,"line_start":34,"line_end":34,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":4804,"byte_end":4812,"line_start":35,"line_end":35,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":6817,"byte_end":6827,"line_start":88,"line_end":88,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":48},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":10326,"byte_end":10336,"line_start":166,"line_end":166,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":54}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":11304,"byte_end":11312,"line_start":197,"line_end":197,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":60},{"krate":0,"index":62},{"krate":0,"index":64},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":18555,"byte_end":18563,"line_start":357,"line_end":357,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":70}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":19861,"byte_end":19866,"line_start":394,"line_end":394,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":20006,"byte_end":20011,"line_start":400,"line_end":400,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":20107,"byte_end":20112,"line_start":406,"line_end":406,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":23408,"byte_end":23421,"line_start":37,"line_end":37,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24811,"byte_end":24824,"line_start":84,"line_end":84,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":126}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27319,"byte_end":27332,"line_start":155,"line_end":155,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":28123,"byte_end":28136,"line_start":185,"line_end":185,"column_start":27,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":142}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":30240,"byte_end":30253,"line_start":22,"line_end":22,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":166},{"krate":0,"index":168},{"krate":0,"index":170},{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":31570,"byte_end":31583,"line_start":60,"line_end":60,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":176}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":31703,"byte_end":31716,"line_start":66,"line_end":66,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":180},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":32602,"byte_end":32615,"line_start":94,"line_end":94,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":190}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":36277,"byte_end":36290,"line_start":32,"line_end":32,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":224},{"krate":0,"index":226},{"krate":0,"index":228},{"krate":0,"index":230},{"krate":0,"index":232},{"krate":0,"index":234}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":39790,"byte_end":39803,"line_start":135,"line_end":135,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":238},{"krate":0,"index":240}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":40754,"byte_end":40767,"line_start":160,"line_end":160,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":40915,"byte_end":40928,"line_start":168,"line_end":168,"column_start":16,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":248},{"krate":0,"index":250},{"krate":0,"index":252},{"krate":0,"index":254},{"krate":0,"index":256},{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":43778,"byte_end":43791,"line_start":252,"line_end":252,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":262},{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":44863,"byte_end":44876,"line_start":281,"line_end":281,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":268}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2119,"byte_end":2133,"line_start":69,"line_end":69,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":276},{"krate":0,"index":278},{"krate":0,"index":280},{"krate":0,"index":282},{"krate":0,"index":284},{"krate":0,"index":286},{"krate":0,"index":288}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":987,"byte_end":990,"line_start":36,"line_end":36,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":10}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1000,"byte_end":1007,"line_start":37,"line_end":37,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":86}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1017,"byte_end":1021,"line_start":38,"line_end":38,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":144}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1031,"byte_end":1036,"line_start":39,"line_end":39,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":192}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":4475,"byte_end":4485,"line_start":23,"line_end":23,"column_start":22,"column_end":32},"kind":{"variant":"Impl","fields":[0]},"from":{"krate":0,"index":30},"to":{"krate":2,"index":1728}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":4510,"byte_end":4520,"line_start":24,"line_end":24,"column_start":22,"column_end":32},"kind":{"variant":"Impl","fields":[1]},"from":{"krate":0,"index":30},"to":{"krate":2,"index":1740}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":4771,"byte_end":4779,"line_start":34,"line_end":34,"column_start":22,"column_end":30},"kind":{"variant":"Impl","fields":[2]},"from":{"krate":0,"index":36},"to":{"krate":2,"index":1728}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":4804,"byte_end":4812,"line_start":35,"line_end":35,"column_start":22,"column_end":30},"kind":{"variant":"Impl","fields":[3]},"from":{"krate":0,"index":36},"to":{"krate":2,"index":1740}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":6817,"byte_end":6827,"line_start":88,"line_end":88,"column_start":6,"column_end":16},"kind":{"variant":"Impl","fields":[4]},"from":{"krate":0,"index":30},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":10326,"byte_end":10336,"line_start":166,"line_end":166,"column_start":15,"column_end":25},"kind":{"variant":"Impl","fields":[5]},"from":{"krate":0,"index":30},"to":{"krate":2,"index":1996}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":11304,"byte_end":11312,"line_start":197,"line_end":197,"column_start":6,"column_end":14},"kind":{"variant":"Impl","fields":[6]},"from":{"krate":0,"index":36},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":18555,"byte_end":18563,"line_start":357,"line_end":357,"column_start":15,"column_end":23},"kind":{"variant":"Impl","fields":[7]},"from":{"krate":0,"index":36},"to":{"krate":2,"index":1996}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":19861,"byte_end":19866,"line_start":394,"line_end":394,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[8]},"from":{"krate":0,"index":310},"to":{"krate":2,"index":7702}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":20006,"byte_end":20011,"line_start":400,"line_end":400,"column_start":23,"column_end":28},"kind":{"variant":"Impl","fields":[9]},"from":{"krate":0,"index":310},"to":{"krate":1,"index":2396}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,97,119,46,114,115],"byte_start":20107,"byte_end":20112,"line_start":406,"line_end":406,"column_start":26,"column_end":31},"kind":{"variant":"Impl","fields":[10]},"from":{"krate":1,"index":3742},"to":{"krate":2,"index":2616}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":23408,"byte_end":23421,"line_start":37,"line_end":37,"column_start":18,"column_end":31},"kind":{"variant":"Impl","fields":[11]},"from":{"krate":0,"index":108},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":24811,"byte_end":24824,"line_start":84,"line_end":84,"column_start":27,"column_end":40},"kind":{"variant":"Impl","fields":[12]},"from":{"krate":0,"index":108},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":27319,"byte_end":27332,"line_start":155,"line_end":155,"column_start":18,"column_end":31},"kind":{"variant":"Impl","fields":[13]},"from":{"krate":0,"index":110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,98,117,102,114,101,97,100,46,114,115],"byte_start":28123,"byte_end":28136,"line_start":185,"line_end":185,"column_start":27,"column_end":40},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":0,"index":110},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":30240,"byte_end":30253,"line_start":22,"line_end":22,"column_start":15,"column_end":28},"kind":{"variant":"Impl","fields":[15]},"from":{"krate":0,"index":158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":31570,"byte_end":31583,"line_start":60,"line_end":60,"column_start":24,"column_end":37},"kind":{"variant":"Impl","fields":[16]},"from":{"krate":0,"index":158},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":31703,"byte_end":31716,"line_start":66,"line_end":66,"column_start":15,"column_end":28},"kind":{"variant":"Impl","fields":[17]},"from":{"krate":0,"index":160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,114,101,97,100,46,114,115],"byte_start":32602,"byte_end":32615,"line_start":94,"line_end":94,"column_start":24,"column_end":37},"kind":{"variant":"Impl","fields":[18]},"from":{"krate":0,"index":160},"to":{"krate":1,"index":4258}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":36277,"byte_end":36290,"line_start":32,"line_end":32,"column_start":16,"column_end":29},"kind":{"variant":"Impl","fields":[19]},"from":{"krate":0,"index":216},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":39790,"byte_end":39803,"line_start":135,"line_end":135,"column_start":26,"column_end":39},"kind":{"variant":"Impl","fields":[20]},"from":{"krate":0,"index":216},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":40754,"byte_end":40767,"line_start":160,"line_end":160,"column_start":25,"column_end":38},"kind":{"variant":"Impl","fields":[21]},"from":{"krate":0,"index":216},"to":{"krate":2,"index":1996}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":40915,"byte_end":40928,"line_start":168,"line_end":168,"column_start":16,"column_end":29},"kind":{"variant":"Impl","fields":[22]},"from":{"krate":0,"index":218},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":43778,"byte_end":43791,"line_start":252,"line_end":252,"column_start":26,"column_end":39},"kind":{"variant":"Impl","fields":[23]},"from":{"krate":0,"index":218},"to":{"krate":1,"index":4290}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,119,114,105,116,101,46,114,115],"byte_start":44863,"byte_end":44876,"line_start":281,"line_end":281,"column_start":25,"column_end":38},"kind":{"variant":"Impl","fields":[24]},"from":{"krate":0,"index":218},"to":{"krate":2,"index":1996}},{"span":{"file_name":[47,104,111,109,101,47,103,101,111,114,103,101,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,98,114,111,116,108,105,50,45,48,46,51,46,50,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2119,"byte_end":2133,"line_start":69,"line_end":69,"column_start":6,"column_end":20},"kind":{"variant":"Impl","fields":[25]},"from":{"krate":0,"index":402},"to":{"krate":4294967295,"index":4294967295}}]}